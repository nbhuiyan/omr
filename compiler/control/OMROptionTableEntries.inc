/*******************************************************************************
 * Copyright (c) 2019, 2019 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at http://eclipse.org/legal/epl-2.0
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception [1] and GNU General Public
 * License, version 2 with the OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#ifndef OMR_OPTION_TABLE_ENTRIES_INC
#define OMR_OPTION_TABLE_ENTRIES_INC

{
    "testOption1",
    {
        "testCategory1",
        "this option is the first option in OMR Options table.",
        OptionProcessors::setTrue,
        OPTION_MEMBER_TO_SET(TR_TestOption1),
        0,
        false
    }
},{
    "testOption2",
    {
        "testCategory2",
        "this option is the second option in OMR Options table.",
        OptionProcessors::setFalse,
        OPTION_MEMBER_TO_SET(TR_TestOption2),
        0,
        false
    }
},{
    "acceptHugeMethods",
    {
        "O",
        "allow processing of really large methods",
        OptionProcessors::setTrue,
        OPTION_MEMBER_TO_SET(TR_ProcessHugeMethods), 
		0,
		false
	}
},{"activateCompThreadWhenHighPriReqIsBlocked",
	{
        "M",
	    "activate another compilation thread when high priority request is blocked", 
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ActivateCompThreadWhenHighPriReqIsBlocked), 
		0,
		false
	}
},{
    "alwaysFatalAssert",
	{
        "I",
	    "Always execute fatal assertion for testing purposes",          
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AlwaysFatalAssert), 
		0,
		false
	}
},{
    "alwaysSafeFatalAssert",
    {
        "I",
        "Always issue a safe fatal assertion for testing purposes",     
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AlwaysSafeFatal), 
		0,
		false
	}
},{
    "aot",
    {
        "O",
	    "ahead-of-time compilation",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AOT), 
		0,
		false
	}
},{
    "aotOnlyFromBootstrap",
	{
        "O",
	    "ahead-of-time compilation allowed only for methods from bootstrap classes",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AOTCompileOnlyFromBootstrap), 
		0,
		false
	}
},{
    "aotSecondRunDetection",
    {
        "M",
	    "perform second run detection for AOT", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_NoAotSecondRunDetection), 
		0,
		false
	}
},{
    "assignEveryGlobalRegister",
	{
        "I",
	    "never refuse to assign any possible register for GRA in spite of the resulting potential spills",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AssignEveryGlobalRegister), 
		0,
		false
	}
},{
    "assumeStartupPhaseUntilToldNotTo",
	{
        "M",
	    "Use compiler.Command(""endOfStartup"") to exit startup phase",        
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_AssumeStartupPhaseUntilToldNotTo), 
		0,
		false
	}
},{
    "assumeStrictFP",
    {
        "C",
	    "always assume strictFP semantics",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_StrictFP), 
		0,
		false
	}
},{
    "breakAfterCompile",
	{
        "D",
	    "raise trap when method compilation ends",  
	    OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakAfterCompile),  
		0,
		false
	}
},{
    "breakBeforeCompile",
	{
        "D",
	    "raise trap when method compilation begins",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakBeforeCompile), 
		0,
		false
	}
},{
    "breakOnBBStart",
	{
        "D",
	    "raise trap on BBStarts of method",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakBBStart),     
		0,
		false
	}
},{
    "breakOnCompile",
	{
        "D",
	    "deprecated; equivalent to breakBeforeCompile",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakBeforeCompile), 
		0,
		false
	}
},{
    "breakOnEntry",
	{
        "D",
	    "insert entry breakpoint instruction in generated code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EntryBreakPoints), 
		0,
		false
	}
},{
    "breakOnJ2IThunk",
	{
        "D",
	    "break before executing a jit-to-interpreter thunk",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakOnJ2IThunk), 
		0,
		false
	} 
},{
    "breakOnNew",
    {
        "D",
	    "break before an inlined object allocation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakOnNew), 
		0,
		false
	}
},{
    "breakOnWriteBarrier",
	{
        "D",
	    "insert breakpoint instruction ahead of inline write barrier",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_BreakOnWriteBarrier), 
		0,
		false
	}
},{
    "breakOnWriteBarrierSnippet",
	{
        "D",
	    "insert breakpoint instruction at beginning of write barrier snippet",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(BreakOnWriteBarrierSnippet), 
		0,
		false
	}
},{
    "checkGRA",
	{
        "D",
	    "Preserve stores that would otherwise be removed by GRA, and then verify that the stored value matches the global register",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CheckGRA), 
		0,
		false
	}
},{
    "checkStructureDuringExitExtraction",
	{
        "D",
	    "Check structure after each step of exit extraction",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CheckStructureDuringExitExtraction), 
		0,
		false
	}
},{
    "compile",
	{
        "D",
	    "Compile these methods immediately. Primarily for use with Compiler.command", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CompileBit),  
		0,
		false
	}
},{
    "concurrentLPQ",
	{
        "M",
	    "Compilations from low priority queue can go in parallel with compilations from main queue",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ConcurrentLPQ), 
		0,
		false
	}
},{
    "conservativeCompilation",
    {
        "O",
	    "more conservative decisions regarding compilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ConservativeCompilation), 
		0,
		false
	}
},{
    "continueAfterILValidationError",
	{
        "O",
	    "Do not abort compilation upon encountering an ILValidation failure.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ContinueAfterILValidationError), 
		0,
		false
	}
},{
    "countWriteBarriersRT",
	{
        "D",
	    "count how many fast and slow RT write barriers occur per thread",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CountWriteBarriersRT), 
		0,
		false
	}
},{
    "crashDuringCompile",
	{
        "M",
	    "force a crash during compilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CrashDuringCompilation), 
		0,
		false
	}
},{
    "debugBeforeCompile",
	{
        "D",
	    "invoke the debugger when method compilation begins",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DebugBeforeCompile), 
		0,
		false
	}
},{
    "debugInliner",
	{
        "O",
	    "trace statements to debug the Inliner",            
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DebugInliner), 
		0,
		false
	}
},{
    "debugOnCompile",
    {
        "D",
	    "deprecated; equivalent to debugBeforeCompile",            
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DebugBeforeCompile), 
		0,
		false
	}
},{
    "debugOnEntry",
	{
        "D",
	    "invoke the debugger at the entry of a method",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DebugOnEntry),       
		0,
		false
	}
},{
    "debugRedundantMonitorElimination",
	{
        "O",
	    "trace statements to debug Monitor Elimination",            
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DebugRedundantMonitorElimination), 
		0,
		false
	}
},{
    "deferReferenceManipulations",
	{
        "I",
	    "defer object reference manipulations to the host runtime.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DeferReferenceManipulations), 
		0,
		false
	}
},{
    "disableAbstractInlining",
	{
        "O",
	    "disable inlining of abstract methods with a single implementor",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAbstractInlining), 
		0,
		false
	}
},{
    "disableAdaptiveDumbInliner",
	{
        "O",
	    "disable adaptive dumbInliner strategy",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAdaptiveDumbInliner), 
		0,
		false
	}
},{
    "disableAESInHardware",
	{
        "O",
	    "do not use native AES instructions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAESInHardware), 
		0,
		false
	}
},{
    "disableAggressiveRecompilations",
	{
        "R",
	    "recompilation to higher opt levels is not anymore twice as probable",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAggressiveRecompilations), 
		0,
		false
	}
},{
    "DisableAllocationInliningString",      
   {
        "O",
	    "disable ANewArray    inline fast helper",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAllocationInlining)   , 
		0,
		false
	}
},{
    "disableAllocationOfScratchBTL",
	{
        "M",
	    "Refuse to allocate scratch memory below the line (zOS 31-bit)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontAllocateScratchBTL), 
		0,
		false
	}
},{
    "DisableAnnotations",                   
    {
        "O",
	    "disable annotation support",                     
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableAnnotations), 
		0,
		false
	}
},{"disableAOTCheckCastInlining",
	{
        "O",
	    "disable AOT check cast inlining",               
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTCheckCastInlining), 
		0,
		false
	}
},{"disableAOTColdCheapTacticalGRA",
    {
        "O",
	    "disable AOT cold cheap tactical GRA",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTColdCheapTacticalGRA), 
		0,
		false
	}
},{
    "disableAOTInstanceFieldResolution",
	{
        "O",
	    "disable AOT instance field resolution",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTInstanceFieldResolution), 
		0,
		false
	}
},{
    "disableAOTInstanceOfInlining",
	{
        "O",
	    "disable AOT instance of inlining",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTInstanceOfInlining), 
		0,
		false
	}
},{
    "disableAOTResolutionPeeking",
    {
        "O",
	    "do not use resolved state at AOT compile time for performance decisions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePeekAOTResolutions), 
		0,
		false
	}
},{"disableAOTResolveDiffCLMethods",
	{
        "O",
	    "do not resolve AOT methods from different class loaders",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTResolveDiffCLMethods), 
		0,
		false
	}
},{"disableAOTStaticField",
    {
        "O",
	    "disable AOT static field inlining",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTStaticField), 
		0,
		false
	}
},{
    "disableAOTWarmRunThroughputImprovement",
    {
        "O",
	    "disable change iprofiler entry choosing heuristic to improve aot warm run throughput",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAOTWarmRunThroughputImprovement), 
		0,
		false
	}},
   {"disableArch11PackedToDFP",
	{"O",
	"disable arch(11) packed to DFP conversion instructions",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableArch11PackedToDFP), 
		0,
		false
	}},
   {"disableArrayCopyOpts",
	{"O",
	"disable array copy optimiations",               
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableArrayCopyOpts), 
		0,
		false
	}},
   {"disableArraySetOpts",
	{"O",
	"disable array set optimiations",                
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableArraySetOpts), 
		0,
		false
	}},
   {"disableArraySetStoreElimination",
	{"O",
	"disable arrayset store elimination",               
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableArraysetStoreElimination), 
		0,
		false
	}},
   {"disableArrayStoreCheckOpts",
	{"O",
	"disable array store check optimizations",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableArrayStoreCheckOpts), 
		0,
		false
	}},
   {"disableAsyncCheckVersioning",
	{"O",
	"disable versioning of loops wrt async checks",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAsyncCheckVersioning), 
		0,
		false
	}},
   {"disableAsyncCompilation",
	{"M",
	"disable asynchronous compilation",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAsyncCompilation), 
		0,
		false
	}},
   {"disableAutoSIMD",
	{"M",
	"disable automatic vectorization of loops",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableAutoSIMD), 
		0,
		false
	}},
   {"disableBasicBlockPeepHole",
	{"O",
	"disable basic blocks peepHole",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBasicBlockPeepHole), 
		0,
		false
	}},
   {"disableBCDArithChildOrdering",
	{"O",
	"stress testing option -- do not reorder children of BCD arithmetic nodes",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBCDArithChildOrdering), 
		0,
		false
	}},
   {"disableBCDOppTracing",
	{"O",
	"disable tracing of various BCD perf opportunities",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBCDOppTracing), 
		0,
		false
	}},
   {"disableBDLLVersioning",
	{"O",
	"disable BigDecimal long lookaside versioning",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBDLLVersioning), 
		0,
		false
	}},
   {"disableBitOpcode",
	{"O",
	"disable converting calling bit operation java method to bitOpcode",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBitOpcode), 
		0,
		false
	}},
   {"disableBlockVersioner",
	{"O",
	"disable block versioner",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBlockVersioner), 
		0,
		false
	}},
   {"disableBranchOnCount",
	{"O",
	"disable branch on count instructions for s390", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBranchOnCount), 
		0,
		false
	}},
   {"disableBranchPreload",
	{"O",
	"disable return branch preload",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableBranchPreload), 
		0,
		false
	}},
   {"disableCallConstUncommoning",
	{"O",
	"disable uncommon call constant node phase", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCallConstUncommoning), 
		0,
		false
	}},
   {"disableCheapWarmOpts",
	{"O",
	"enable cheap warm optimizations",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCheapWarmOpts), 
		0,
		false
	}},
   {"disableCheckcastAndProfiledGuardCoalescer",
	{"O",
	"disable checkcast and profiled guard  coalescion optimization ",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCheckcastAndProfiledGuardCoalescer), 
		0,
		false
	}},
   {"disableCHOpts",
	{"O",
	"disable CHTable based optimizations",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCHOpts), 
		0,
		false
	}},
   {"disableClearCodeCacheFullFlag",
	{"I",
	"disable the re-enabling of full code cache when a method body is freed.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableClearCodeCacheFullFlag),
		0,
		false
	}},
   {"disableCodeCacheConsolidation",
	{"M",
	"disable code cache consolidation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableCodeCacheConsolidation), 
		0,
		false
	}},
   {"disableCodeCacheReclamation",
	{"I",
	"disable the freeing of compilations.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCodeCacheReclamation),
		0,
		false
	}},
   {"disableCodeCacheSnippets",
	{"O",
	"disable code cache snippets (e.g. allocation prefetch snippet) ",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCodeCacheSnippets), 
		0,
		false
	}},
   {"disableCompareAndBranchInstruction",
	{"O",
	"disable compareAndBranch instruction",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCompareAndBranchInstruction), 
		0,
		false
	}},
   {"disableCompilationAfterDLT",
	{"O",
	"disable queueing of normal compilation for method that has been DLT compiled.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCompilationAfterDLT), 
		0,
		false
	}},
   {"disableCompilationThread",
	{"M",
	"disable compilation on a separate thread",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCompilationThread), 
		0,
		false
	}},
   {"disableConservativeColdInlining",
	{"O",
	"Do not be conservative with inlining at cold",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableConservativeColdInlining), 
		0,
		false
	}},
   {"disableConservativeHotRecompForServerMode",
	{"R",
	"Do not be more conservative in server mode",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableConservativeHotRecompilationForServerMode), 
		0,
		false
	}},
   {"disableConservativeInlining",
	{"O",
	"Do not be conservative with inlining",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableConservativeInlining), 
		0,
		false
	}},
   {"disableConverterReducer",
	{"O",
	"disable reuducing converters methods to intrinisic arrayTranslate",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableConverterReducer), 
		0,
		false
	}},
   {"disableCPUUtilization",
	{"M",
	"disable tracking of cpu utilization",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCPUUtilization), 
		0,
		false
	}},
   {"disableCrackedEdit",
	{"O",
	"disable cracking of edit/edit-and-mark",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCrackedEditOptimization), 
		0,
		false
	}},
   {"disableCustomMethodHandleThunks",
	{"R",
	"disable creation of custom invokeExact thunks for MethodHandles",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableCustomMethodHandleThunks), 
		0,
		false
	}},
   {"disableDAATrailingZeros",
	{"O",
	"disable DAA trailing zero in byte array acceleration",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDAATrailingZero), 
		0,
		false
	}},
   {"disableDataCacheReclamation",
	{"I",
	"disable the reaping of data caches when they are no longer needed.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDataCacheReclamation),
		0,
		false
	}},
   {"disableDeadStoreBailOut",
	{"O",
	"disable bail out of dead store",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDeadStoreBailOut), 
		0,
		false
	}},
   {"disableDecimalFormatPeephole",
	{"O",
	"disable optimizing DecimalFormat.format(BigDecimal.doubleValue())",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDecimalFormatPeephole), 
		0,
		false
	}},
   {"disableDelayRelocationForAOTCompilations",
	{"M",
	"Do not relocate code for AOT compilations right away",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDelayRelocationForAOTCompilations), 
		0,
		false
	}},
   {"disableDememoization",
	{"O",
	"always call \"memoizing\" getters (like Integer.valueOf) rather than having Escape Analysis turn them into noncontiguous stack allocations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDememoization), 
		0,
		false
	}},
   {"disableDirectMemoryOps",
	{"O",
	"disable generation of direct memory instructions",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDirectMemoryOps), 
		0,
		false
	}},
   {"disableDirectStaticAccessOnZ",
	{"O",
	"support relative load instructions for c and c++",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDirectStaticAccessOnZ), 
		0,
		false
	}},
   {"disableDirectToJNI",
	{"O",
	"disable all JNI linkage dispatch sequences including thunks",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDirectToJNI), 
		0,
		false
	}},
   {"disableDirectToJNIInline",
	{"O",
	"disable direct calls to JNI methods from jitted methods (but still create thunks)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDirectToJNIInline), 
		0,
		false
	}},
   {"disableDLTrecompilationPrevention",
	{"M",
	"disable the prevention of DLT bogus recompilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDLTrecompilationPrevention), 
		0,
		false
	}},
   {"disableDoubleWordStackAlignment",
	{"O",
	"disable double word java stack alignement on z",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDoubleWordStackAlignment), 
		0,
		false
	}},
   {"disableDowngradeToColdOnVMPhaseStartup",
	{"M",
	"disable downgrading optLevel to cold during STARTUP VM phase",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET( TR_DisableDowngradeToColdOnVMPhaseStartup), 
		0,
		false
	}},
   {"disableDualTLH",
	{"D",
	"Disable use of non-zero initialized TLH",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDualTLH), 
		0,
		false
	}},
   {"disableDumpFlowGraph",
	{"L",
	"Disable dumping of the flow graph into trace file",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDumpFlowGraph), 
		0,
		false
	}},
   {"disableDynamicLoopTransfer",
	{"O",
	"disable dynamic loop transfer",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDynamicLoopTransfer), 
		0,
		false
	}},
   {"disableDynamicRIBufferProcessing",
	{"O",
	"prevent disabling buffer processing",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDynamicRIBufferProcessing), 
		0,
		false
	}},
   {"disableDynamicSamplingWindow",
	{"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableDynamicSamplingWindow), 
		0,
		false
	}},
   {"disableEarlyCompilationDuringIdleCpu",
   {"M",
	"", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableEarlyCompilationDuringIdleCpu), 
		0,
		false
	}},
   {"disableEDO",
	{"O",
	"disable exception directed optimizations",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableEDO), 
		0,
		false
	}},
   {"disableEmptyPreHeaderCheck",
	{"O",
	"disable Empty pre-header check in loop canonicalization",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableEmptyPreHeaderCheck), 
		0,
		false
	}},
   {"disableEnhancedClobberEval",
	{"O",
	"disable passthrough clobber eval",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableEnhancedClobberEval), 
		0,
		false
	}},
   {"disableExitExtraction",
	{"O",
	"disable extraction of structure nodes that unconditionally exit to outer regions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableExitExtraction), 
		0,
		false
	}},
   {"disableFastAssumptionReclamation",
	{"O",
	"disable fast assumption reclamation",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFastAssumptionReclamation), 
		0,
		false
}},{
    "disableFastDLTOnLongRunningInterpreter",
    {
        "O",
        "disable Fast DLT on long-running interpreter",                                        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFastDLTOnLongRunningInterpreter), 
		0,
		false
	}
},{
    "DisableFastStringIndexOfString",       
    {
        "O",
	    "disable fast String.indexOf",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFastStringIndexOf), 
		0,
		false
	}
},{
    "disableForcedEXInlining",
	{
        "O",
	    "disable forced EX inlining",                    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableForcedEXInlining), 
		0,
		false
	}
},{
    "disableFPCodeGen",
	{
        "O",
	    "disable floating point code generation",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFPCodeGen), 
		0,
		false
	}
},{
    "disableFPE",
	{
        "C",
	    "disable FPE",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFPE), 
		0,
		false
	}
},{
    "disableGCRPatching",
	{
        "R",
	    "disable patching of the GCR guard",              
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableGCRPatching), 
		0,
		false
	}},
   {"disableGlobalStaticBaseRegister",
	{"O",
	"disable global static base register ",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGlobalStaticBaseRegister), 
		0,
		false
	}},
   {"disableGLUColdRedirection",
	{"O",
	"disable general loop unroller redirection of cold edges to loop header",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGLUColdRedirection), 
		0,
		false
	}},
   {"disableGRACostBenefitModel",
	{"O",
	"disable GRA cost/benefit model",                 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableGRACostBenefitModel), 
		0,
		false
	}},
   {"disableGuardedCallArgumentRemat",
	{"O",
	"don't rematerialize a guarded virtual call's arguments on the cold path; instead, leave the expressions on the mainline path",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGuardedCallArgumentRemat), 
		0,
		false
	}},
   {"disableGuardedCountingRecompilation",
   {"O",
	"disable GCR.  If you don't know what that is, I don't have room to explain it here.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGuardedCountingRecompilations), 
		0,
		false
	}},
   {"disableGuardedCountingRecompilations",
   {"O",
	"deprecated.  Same as disableGuardedCountingRecompilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGuardedCountingRecompilations), 
		0,
		false
	}},
   {"disableGuardedStaticFinalFieldFolding",
	{"O",
	"disable static final field folding guarded by OSR guards",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableGuardedStaticFinalFieldFolding), 
		0,
		false
	}},
   {"disableHalfSlotSpills",
	{"O",
	"disable sharing of a single 8-byte spill temp for two 4-byte values", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHalfSlotSpills), 
		0,
		false
	}},
   {"disableHardwareProfilerDataCollection",
	{"O",
	"disable the collection of hardware profiler information while maintaining the framework",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHWProfilerDataCollection), 
		0,
		false
	}},
   {"disableHardwareProfilerDuringStartup",
	{"O",
	"disable hardware profiler during startup",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHardwareProfilerDuringStartup), 
		0,
		false
	}},
   {"disableHardwareProfileRecompilation",
   {"O",
	"disable hardware profile recompilation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableHardwareProfileRecompilation), 
		0,
		false
	}},
   {"disableHardwareProfilerReducedWarm",
	{"O",
	"disable hardware profiler reduced warm recompilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHardwareProfilerReducedWarm), 
		0,
		false
	}},
   {"disableHardwareProfilerReducedWarmUpgrades",
	{"O",
	"disable hardware profiler reduced warm recompilation Upgrades",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHardwareProfilerReducedWarmUpgrades), 
		0,
		false
	}},
   {"disableHardwareProfilingThread",
	{"O",
	"do not create a separate thread for hardware profiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHWProfilerThread), 
		0,
		false
	}},
   {"disableHeapAllocOOL",
	{"O",
	"disable heap alloc OOL and replace with heap alloc snippet", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHeapAllocOOL), 
		0,
		false
	}},
   {"disableHierarchyInlining",
	{"O",
	"disable inlining of overridden methods not overridden in subclass of the type of this pointer", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHierarchyInlining), 
		0,
		false
	}},
   {"disableHighWordRA",
	{"O",
	"disable High Word register allocations on z196 or newer",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHighWordRA), 
		0,
		false
	}},
   {"disableHPRSpill",
	{"O",
	"disable spilling 31-bit values into High Word registers on z196 or newer",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHPRSpill), 
		0,
		false
	}},
   {"disableHPRUpgrade",
	{"O",
	"disable upgrading 31-bit instructions to use High Word registers on z196 or newer",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableHPRUpgrade), 
		0,
		false
	}},
   {"disableHWAcceleratedStringCaseConv",
	{"O",
	"disable SIMD case conversion for toUpperCase and toLowerCase in Java",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDStringCaseConv), 
		0,
		false
	}},
   {"disableIncrementalCCR",
	{"O",
	"disable incremental ccr",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIncrementalCCR), 
		0,
		false
	}},
   {"DisableInlineCheckCastString",
    {"O",
	"disable CheckCast    inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineCheckCast)   , 
		0,
		false
	}},
   {"disableInlineCheckIfFinalizeObject",
	{"M",
	"disable CheckIfFinalizeObject inline helper",              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineCheckIfFinalizeObject), 
		0,
		false
	}},
   {"disableInlineEXTarget",
	{"O",
	"disable inlining of EX target for arraycopy and arraycmp",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineEXTarget), 
		0,
		false
	}},
   {"DisableInlineIfInstanceOfString",      
    {"O",
	"disable IfInstanceOf inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineIfInstanceOf), 
		0,
		false
	}},
   {"DisableInlineInstanceOfString",        
    {"O",
	"disable InstanceOf   inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineInstanceOf)  , 
		0,
		false
	}},
   {"disableInlineIsInstance",
	{"O",
	"disable isInstance   inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineIsInstance)  , 
		0,
		false
	}},
   {"DisableInlineMonEntString",            
    {"O",
	"disable MonEnt       inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineMonEnt)      , 
		0,
		false
	}},
   {"DisableInlineMonExitString",           
    {"O",
	"disable MonExit      inline fast helper",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineMonExit)     , 
		0,
		false
	}},
   {"disableInlinerArgsPropagation",
	{"O",
	"enable argument propagation in inliner",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlinerArgsPropagation), 
		0,
		false
	}},
   {"disableInlinerFanIn",
	{"O",
	"disable fan in as a consideration for inlining",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlinerFanIn), 
		0,
		false
	}},
   {"disableInlineWriteBarriersRT",
	{"O",
	"disable write barrier inline fast helper for real-time",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInlineWriteBarriersRT) , 
		0,
		false
	}},
   {"disableInliningDuringVPAtWarm",
	{"O",
	"disable inlining during VP for warm bodies",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInliningDuringVPAtWarm), 
		0,
		false
	}},
   {"DisableInliningOfNativesString",       
   {"O",
	"disable inlining of natives",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInliningOfNatives), 
		0,
		false
	}},
   {"disableIntegerCompareSimplification",
	{"O",
	"disable byte/short/int/long compare simplification  ",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIntegerCompareSimplification), 
		0,
		false
	}},
   {"disableInterfaceCallCaching",
	{"O",
	"disable interfaceCall caching   ",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_disableInterfaceCallCaching), 
		0,
		false
	}},
   {"disableInterfaceInlining",
	{"O",
	"disable merge new",                             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInterfaceInlining), 
		0,
		false
	}},
   {"disableInternalPointers",
	{"O",
	"disable internal pointer creation",             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInternalPointers), 
		0,
		false
	}},
   {"disableInterpreterProfiling",
	{"O",
	"disable Interpreter Profiling hooks   ",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInterpreterProfiling), 
		0,
		false
	}},
   {"disableInterpreterProfilingThread",
	{"O",
	"do not create a separate thread for interpreter profiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIProfilerThread), 
		0,
		false
	}},
   {"disableInterpreterSampling",
	{"O",
	"disable sampling of interpreted methods",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInterpreterSampling), 
		0,
		false
	}},
   {"disableIntrinsics",
	{"O",
	"disable inlining of packed decimal intrinsic functions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIntrinsics), 
		0,
		false
	}},
   {"disableInvariantCodeMotion",
	{"O",
	"disable invariant code motion.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableInvariantCodeMotion), 
		0,
		false
	}},
   {"disableIPA",
	{"O",
	"disable inter procedural analysis.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIPA), 
		0,
		false
	}},
   {"disableIprofilerDataCollection",
	{"M",
	"disables the collection of iprofiler information while maintaining the framework",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIProfilerDataCollection), 
		0,
		false
	}},
   {"disableIprofilerDataPersistence",
	{"M",
	"disable storage of iprofile information in the shared cache",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePersistIProfile), 
		0,
		false
	}},
   {"disableIterativeSA",
	{"O",
	"revert back to a recursive version of Structural Analysis",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableIterativeSA), 
		0,
		false
	}},
   {"disableJavaEightStartupHeuristics",
	{"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableJava8StartupHeuristics), 
		0,
		false
	}},
   {"disableJProfiling",
	{"O",
	"disable JProfiling", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableJProfiling), 
		0,
		false
	}},
   {"disableJProfilingThread",
	{"O",
	"disable separate thread for JProfiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableJProfilerThread), 
		0,
		false
	}},
   {"disableKnownObjectTable",
	{"O",
	"disable support for including heap object info in symbol references",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableKnownObjectTable), 
		0,
		false
	}},
   {"disableLastITableCache",
	{"C",
	"disable using class lastITable cache for interface dispatches", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLastITableCache), 
		0,
		false
	}},
   {"disableLeafRoutineDetection",
	{"O",
	"disable lleaf routine detection on zlinux",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLeafRoutineDetection), 
		0,
		false
	}},
   {"disableLinkageRegisterAllocation",
	{"O",
	"don't turn parm loads into RegLoads in first basic block", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLinkageRegisterAllocation), 
		0,
		false
	}},
   {"disableLiveMonitorMetadata",
	{"O",
	"disable the creation of live monitor metadata",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLiveMonitorMetadata), 
		0,
		false
	}},
   {"disableLiveRangeSplitter",
	{"O",
	"disable live range splitter",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLiveRangeSplitter), 
		0,
		false
	}},
   {"disableLocalCSEVolatileCommoning",
	{"O",
	"disable local common subexpression elimination volatile commoning",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLocalCSEVolatileCommoning), 
		0,
		false
	}},
   {"disableLocalVPSkipLowFreqBlock",
	{"O",
	"Do not skip processing of low frequency blocks in localVP", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableLocalVPSkipLowFreqBlock), 
		0,
		false
	}},
   {"disableLockReservation",
	{"O",
	"disable lock reservation",                      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLockResevation), 
		0,
		false
	}},
   {"disableLongRegAllocation",
	{"O",
	"disable allocation of 64-bit regs on 32-bit",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Disable64BitRegsOn32Bit), 
		0,
		false
	}},
   {"disableLongRegAllocationHeuristic",
	{"O",
	"disable heuristic for long register allocation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Disable64BitRegsOn32BitHeuristic), 
		0,
		false
	}},
   {"disableLookahead",
	{"O",
	"disable class lookahead",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLookahead), 
		0,
		false
	}},
   {"disableLoopEntryAlignment",
	{"O",
	"disable loop Entry alignment",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLoopEntryAlignment), 
		0,
		false
	}},
   {"disableLoopReplicatorColdSideEntryCheck",
   {"I",
	"disable cold side-entry check for replicating loops containing hot inner loops",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLoopReplicatorColdSideEntryCheck), 
		0,
		false
	}},
   {"disableLoopTransfer",
	{"O",
	"disable the loop transfer part of loop versioner",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableLoopTransfer), 
		0,
		false
	}},
   {"disableMarkingOfHotFields",
	{"O",
	"disable marking of Hot Fields",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMarkingOfHotFields), 
		0,
		false
	}},
   {"disableMarshallingIntrinsics",
	{"O",
	"Disable packed decimal to binary marshalling and un-marshalling optimization. They will not be inlined.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMarshallingIntrinsics), 
		0,
		false
	}},
   {"disableMaskVFTPointers",
	{"O",
	"disable masking of VFT Pointers",               
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMaskVFTPointers), 
		0,
		false
	}},
   {"disableMaxMinOptimization",
	{"O",
	"disable max and min optimizations",                
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMaxMinOptimization), 
		0,
		false
	}},
   {"disableMccFreeBlockRecycling",
	{"O",
	"do not reuse code cache freed blocks",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableFreeCodeCacheBlockRecycling), 
		0,
		false
	}},
   {"disableMCSBypass",
	{"O",
	"disable allocating JNI global references to skip some levels of indirection when accessing a MutableCallSite's target MethodHandle in jitted code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMCSBypass), 
		0,
		false
	}},
   {"disableMergeNew",
	{"O",
	"disable merge new",                             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMergeNew), 
		0,
		false
	}},
   {"disableMergeStackMaps",
	{"O",
	"disable stack map merging",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMergeStackMaps), 
		0,
		false
	}},
   {"disableMetadataReclamation",
	{"I",
	"disable J9JITExceptionTable reclamation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMetadataReclamation), 
		0,
		false
	}},
   {"disableMethodHandleInvokeOpts",
	{"O",
	"do not perform any special optimizations on calls to MethodHandle.invoke",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMethodHandleInvokeOpts), 
		0,
		false
	}},
   {"disableMethodHandleThunks",
	{"D",
	"do not produce jitted bodies to accelerate JSR292 MethodHandle invocation",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMethodHandleThunks), 
		0,
		false
	}},
   {"disableMethodIsCold",
	{"O",
	"do not use heuristics to determine whether whole methods are cold based on how many times they have been interpreted",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMethodIsCold), 
		0,
		false
	}},
   {"disableMHCustomizationLogicCalls",
	{"C",
	"do not insert calls to MethodHandle.doCustomizationLogic for handle invocations outside of thunks", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableMHCustomizationLogicCalls), 
		0,
		false
	}},
   {"disableMonitorCoarsening",
	{"O",
	"disable monitor coarsening",                    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMonitorCoarsening), 
		0,
		false
	}},
   {"disableMultiLeafArrayCopy",
	{"O",
	"disable multi-leaf arraycopy for real-time",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMultiLeafArrayCopy), 
		0,
		false
	}},
   {"disableMultiTargetInlining",
	{"O",
	"disable multi-target inlining",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMultiTargetInlining), 
		0,
		false
	}},
   {"disableMutableCallSiteGuards",
	{"O",
	"disable virtual guards for calls to java.lang.invoke.MutableCallSite.getTarget().invokeExact(...) (including invokedynamic)",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableMutableCallSiteGuards), 
		0,
		false
	}},
   {"disableNewBlockOrdering",
	{"O",
	"disable new block ordering, instead use basic block extension",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewBlockOrdering), 
		0,
		false
	}},
   {"disableNewBVA",
	{"O",
	"disable structure based bit vector analysis",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewBVA), 
		0,
		false
	}},
   {"disableNewInliningInfrastructure",
	{"O",
	"disable new inlining infrastructure ",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewInliningInfrastructure), 
		0,
		false
	}},
   {"DisableNewInstanceImplOptString",      
   {"O",
	"disable newInstanceImpl opt",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewInstanceImplOpt), 
		0,
		false
	}},
   {"disableNewLoopTransfer",
	{"O",
	"disable loop transfer for virtual guards",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewLoopTransfer), 
		0,
		false
	}},
   {"disableNewMethodOverride",
	{"O",
	"disable replacement for jitUpdateInlineAttribute",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewMethodOverride), 
		0,
		false
	}},
   {"disableNewStoreHint",
	{"O",
	"disable re-initializing BCD nodes to a new store hint when one is available",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewStoreHint), 
		0,
		false
	}},
   {"disableNewX86VolatileSupport",
	{"O",
	"disable new X86 Volatile Support",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNewX86VolatileSupport), 
		0,
		false
	}},
   {"disableNextGenHCR",
	{"O",
	"disable HCR implemented with on-stack replacement", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNextGenHCR), 
		0,
		false
	}},
   {"disableNonvirtualInlining",
	{"O",
	"disable inlining of non virtual methods",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNonvirtualInlining), 
		0,
		false
	}},
   {"disableNopBreakpointGuard",
	{"O",
	"disable nop of breakpoint guards",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNopBreakpointGuard), 
		0,
		false
	}},
   {"disableNoServerDuringStartup",
	{"M",
	"Do not use NoServer during startup", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNoServerDuringStartup), 
		0,
		false
	}},
   {"disableNoVMAccess",
	{"O",
	"disable compilation without holding VM access", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableNoVMAccess), 
		0,
		false
	}},
   {"disableOnDemandLiteralPoolRegister",
	{"O",
	"disable on demand literal pool register",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOnDemandLiteralPoolRegister), 
		0,
		false
	}},
   {"disableOOL",
	{"O",
	"disable out of line instruction selection",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOOL), 
		0,
		false
	}},
   {"disableOSR",
	{"O",
	"disable support for on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOSR), 
		0,
		false
	}},
   {"disableOSRCallSiteRemat",
	{"O",
	"disable use of the call stack remat table in on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOSRCallSiteRemat), 
		0,
		false
	}},
   {"disableOSRLiveRangeAnalysis",
	{"O",
	"disable live range analysis for on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOSRLiveRangeAnalysis), 
		0,
		false
	}},
   {"disableOSRLocalRemat",
	{"O",
	"disable use of remat when inserting guards for on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOSRLocalRemat), 
		0,
		false
	}},
   {"disableOSRSharedSlots",
	{"O",
	"disable support for shared slots in on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOSRSharedSlots), 
		0,
		false
	}},
   {"disableOutlinedNew",
	{"O",
	"do object allocation logic inline instead of using a fast jit helper", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableOutlinedNew), 
		0,
		false
	}},
   {"disablePackedDecimalIntrinsics",
	{"O",
	"Disables packed decimal function optimizations and avoid generating exception triggering packed decimal instructions on z/Architecture.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePackedDecimalIntrinsics), 
		0,
		false
	}},
   {"disablePartialInlining",
	{"O",
	"disable  partial Inlining ",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePartialInlining), 
		0,
		false
	}},
   {"disablePostProfileCompPriorityBoost",
   {"M",
	"disable boosting the priority of post profiling compilations", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePostProfileCompPriorityBoost), 
		0,
		false
	}},
   {"disablePRBE",
	{"O",
	"disable partial redundancy branch elimination", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePRBE), 
		0,
		false
	}},
   {"disablePreexistenceDuringGracePeriod",
   {"O",
	"disable preexistence during CLP grace period", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisablePrexistenceDuringGracePeriod), 
		0,
		false
	}},
   {"disableProfiledInlining",
	{"O",
	"disable inlining based on profiled this values",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableProfiledInlining), 
		0,
		false
	}},
   {"disableProfiledMethodInlining",
	{"O",
	"disable inlining based on profiled methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableProfiledMethodInlining), 
		0,
		false
	}},
   {"disableProfiling",
	{"O",
	"disable profiling",                             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableProfiling), 
		0,
		false
	}},
   {"disableProfilingDataReclamation",
	{"O",
	"disable reclamation for profiling data",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableProfilingDataReclamation), 
		0,
		false
	}},
   {"disableRampupImprovements",
	{"M",
	"Disable various changes that improve rampup",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRampupImprovements), 
		0,
		false
	}},
   {"disableReadMonitors",
	{"O",
	"disable read monitors",                        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableReadMonitors), 
		0,
		false
	}},
   {"disableRecognizedMethods",
	{"O",
	"disable recognized methods",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRecognizedMethods), 
		0,
		false
	}},
   {"disableRecompDueToInlinedMethodRedefinition",
	{"O",
	"disable recompilation for method body with patched HCR guard", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRecompDueToInlinedMethodRedefinition), 
		0,
		false
	}},
   {"disableReducedPriorityForCustomMethodHandleThunks",
	{"R",
	"compile custom MethodHandle invoke exact thunks at the same priority as normal java methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableReducedPriorityForCustomMethodHandleThunks), 
		0,
		false
	}},
   {"disableRefArraycopyRT",
	{"O",
	"disable reference arraycopy for real-time gc",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRefArraycopyRT), 
		0,
		false
	}},
   {"disableRefinedAliases",
	{"O",
	"disable collecting side-effect summaries from compilations to improve aliasing info in subsequent compilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRefinedAliases), 
		0,
		false
	}},
   {"disableRefinedBCDClobberEval",
	{"O",
	"disable trying to minimize the number of BCD clobber evaluate copies ",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRefinedBCDClobberEval), 
		0,
		false
	}},
   {"disableRegisterPressureSimulation",
	{"O",
	"don't walk the trees to estimate register pressure during global register allocation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRegisterPressureSimulation), 
		0,
		false
	}},
   {"disableRMODE64",
	{"O",
	"Disable residence mode of compiled bodies on z/OS to reside above the 2-gigabyte bar", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableRMODE64), 
		0,
		false
	}},
   {"disableRXusage",
	{"O",
	"disable increased usage of RX instructions",    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableRXusage), 
		0,
		false
	}},
   {"disableSamplingJProfiling",
	{"O",
	"Disable profiling in the jitted code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSamplingJProfiling), 
		0,
		false
	}},
   {"disableScorchingSampleThresholdScalingBasedOnNumProc",
	{"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableScorchingSampleThresholdScalingBasedOnNumProc), 
		0,
		false
	}},
   {"disableSelectiveNoServer",
	{"D",
	"Disable turning on noServer selectively",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSelectiveNoOptServer), 
		0,
		false
	}},
   {"disableSeparateInitFromAlloc",
	{"O",
	"disable separating init from alloc",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSeparateInitFromAlloc), 
		0,
		false
	}},
   {"disableShareableMethodHandleThunks",
	{"R",
	"disable creation of shareable invokeExact thunks for MethodHandles",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableShareableMethodHandleThunks), 
		0,
		false
	}},
   {"disableSharedCacheHints",
	{"R",
	"disable storing and loading hints from shared cache",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSharedCacheHints), 
		0,
		false
	}},
   {"disableSIMD",
	{"O",
	"disable SIMD exploitation and infrastructure on platforms supporting vector register and instructions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMD), 
		0,
		false
	}},
   {"disableSIMDArrayCompare",
	{"O",
	"Disable vectorized array comparison using SIMD instruction",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDArrayCompare), 
		0,
		false
	}},
   {"disableSIMDArrayCopy",
	{"O",
	"Disable vectorized array copying using SIMD instruction",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDArrayCopy), 
		0,
		false
	}},
   {"disableSIMDArrayTranslate",
	{"O",
	"disable SIMD instructions for array translate",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDArrayTranslate), 
		0,
		false
	}},
   {"disableSIMDDoubleMaxMin",
	{"O",
	"disable SIMD instructions for double max min",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDDoubleMaxMin), 
		0,
		false
	}},
   {"disableSIMDStringHashCode",
	{"O",
	"disable vectorized java/lang/String.hashCode implementation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDStringHashCode), 
		0,
		false
	}},
   {"disableSIMDUTF16BEEncoder",
	{"M",
	"disable inlining of SIMD UTF16 Big Endian encoder",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDUTF16BEEncoder), 
		0,
		false
	}},
   {"disableSIMDUTF16LEEncoder",
	{"M",
	"disable inlining of SIMD UTF16 Little Endian encoder",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSIMDUTF16LEEncoder), 
		0,
		false
	}},
   {"disableSmartPlacementOfCodeCaches",
	{"O",
	"disable placement of code caches in memory so they are near each other and the DLLs", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSmartPlacementOfCodeCaches), 
		0,
		false
	}},
   {"disableStoreAnchoring",
	{"O",
	"in trivialStoreSinking disable store child anchoring and therefore more aggressively duplicate trees",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStoreAnchoring), 
		0,
		false
	}},
   {"disableStoreOnCondition",
	{"O",
	"disable store on condition (STOC) code gen",                        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStoreOnCondition), 
		0,
		false
	}},
   {"disableStoreSinking",
	{"O",
	"disable store sinking",                        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStoreSinking), 
		0,
		false
	}},
   {"disableStringBuilderTransformer",
	{"O",
	"enable transforming StringBuilder constructor to preallocate a buffer for String concatenation operations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStringBuilderTransformer), 
		0,
		false
	}},
   {"disableStringPeepholes",
	{"O",
	"disable stringPeepholes",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStringPeepholes), 
		0,
		false
	}},
   {"disableStripMining",
	{"O",
	"disable loop strip mining",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableStripMining), 
		0,
		false
	}},
   {"disableSuffixLogs",
	{"O",
	"do not add the date/time/pid suffix to the file name of the logs", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnablePIDExtension), 
		0,
		false
	}},
   {"disableSupportForCpuSpentInCompilation",
	{"M",
	"do not provide CPU spent in compilation",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSupportForCpuSpentInCompilation), 
		0,
		false
	}},
   {"disableSwitchAwayFromProfilingForHotAndVeryhot",
	{"O",
	"disable switch away from profiling for hot and veryhot",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSwitchAwayFromProfilingForHotAndVeryhot), 
		0,
		false
	}},
   {"disableSymbolValidationManager",
	{"M",
	"Enable Symbol Validation Manager for Relocatable Compile Validations", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableSymbolValidationManager), 
		0,
		false
	}},
   {"disableSynchronizedFieldLoad",
	{"O",
	"Disable the use of hardware optimized synchronized field load intrinsics",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSynchronizedFieldLoad), 
		0,
		false
	}},
   {"disableSyncMethodInlining",
	{"O",
	"disable inlining of synchronized methods",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableSyncMethodInlining), 
		0,
		false
	}},
   {"disableTailRecursion",
	{"O",
	"disable tail recursion",                        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTailRecursion), 
		0,
		false
	}},
   {"disableTarokInlineArrayletAllocation",
	{"O",
	"disable Tarok inline Arraylet Allocation in genHeapAlloc",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTarokInlineArrayletAllocation), 
		0,
		false
	}},
   {"disableThrowToGoto",
	{"O",
	"disable throw to goto",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableThrowToGoto), 
		0,
		false
	}},
   {"disableThunkTupleJ2I",
	{"D",
	"do not replace initialInvokeExactThunk with J2I thunk / helper address in ThunkTuple",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableThunkTupleJ2I), 
		0,
		false
	}},
   {"disableTLE",
	{"O",
	"disable transactional lock elision",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTLE), 
		0,
		false
	}},
   {"disableTlhPrefetch",
	{"O",
	"disable software prefetch on allocation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTLHPrefetch), 
		0,
		false
	}},
   {"disableTM",
	{"O",
	"disable transactional memory support",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTM), 
		0,
		false
	}},
   {"disableTOCForConsts",
	{"O",
	"disable use of the TOC for constants and floats materialization",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTOCForConsts), 
		0,
		false
	}},
   {"disableTraceRegDeps",
	{"O",
	"disable printing of register dependancies for each instruction in trace file",             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTraceRegDeps), 
		0,
		false
	}},
   {"disableTraps",
	{"C",
	"disable trap instructions",                      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTraps), 
		0,
		false
	}},
   {"disableTrivialDeadBlockRemoval",
	{"O",
	"disable trivial dead block removal ",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableTrivialDeadBlockRemover), 
		0,
		false
	}},
   {"disableTrivialStoreSinking",
	{"O",
	"disable trivial store sinking", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableTrivialStoreSinking), 
		0,
		false
	}},
   {"disableUncountedUnrolls",
	{"O",
	"disable GLU from unrolling uncoutned loops ",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUncountedUnrolls), 
		0,
		false
	}},
   {"disableUnsafe",
	{"O",
	"disable code to inline Unsafe natives",         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUnsafe), 
		0,
		false
	}},
   {"disableUpdateAOTBytesSize",
	{"M",
	"Don't send VM size of bodies that could have been AOT'd if the SCC wasn't full",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUpdateAOTBytesSize), 
		0,
		false
	}},
   {"disableUpdateJITBytesSize",
	{"M",
	"Don't send VM size of IProfiler Entires and Hints that could have been persisted if the SCC wasn't full",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUpdateJITBytesSize), 
		0,
		false
	}},
   {"disableUpgradeBootstrapAtWarm",
	{"R",
	"Recompile bootstrap AOT methods at warm instead of cold", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UpgradeBootstrapAtWarm), 
		0,
		false
	}},
   {"disableUpgrades",
	{"O",
	"Prevent Jit Sampling from upgrading cold compilations",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUpgrades), 
		0,
		false
	}},
   {"disableUpgradingColdCompilations",
	{"R",
	"disable upgrading to warm those methods compiled at cold due to classLoadPhase",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUpgradingColdCompilations), 
		0,
		false
	}},
   {"disableUseDefForShadows",
	{"I",
	"temporary, disables usedef for shadows.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUseDefForShadows),
		0,
		false
	}},
   {"disableUseRIOnlyForLargeQSZ",
	{"M",
	"", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UseRIOnlyForLargeQSZ), 
		0,
		false
	}},
   {"disableUTF16BEEncoder",
	{"M",
	"disable inlining of UTF16 Big Endian encoder",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableUTF16BEEncoder), 
		0,
		false
	}},
   {"disableValueProfiling",
	{"O",
	"disable value profiling",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableValueProfiling), 
		0,
		false
	}},
   {"disableVariablePrecisionDAA",
	{"O",
	"disable variable precision DAA optimizations",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVariablePrecisionDAA), 
		0,
		false
	}},
   {"disableVectorBCD",
	{"O",
	"disable vector instructions for DAA BCD intrinsics ",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVectorBCD), 
		0,
		false
	}},
   {"disableVectorRegGRA",
	{"O",
	"disable global register allocation for vector regs",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVectorRegGRA), 
		0,
		false
	}},
   {"disableVerification",
	{"O",
	"disable verification of internal data structures between passes",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVerification), 
		0,
		false
	}},
   {"DisableVirtualGuardNOPingString",      
   {"O",
	"disable virtual guard NOPing",                  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVirtualGuardNOPing), 
		0,
		false
	}},
   {"disableVirtualInlining",
	{"O",
	"disable inlining of virtual methods",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVirtualInlining), 
		0,
		false
	}},
   {"disableVirtualScratchMemory",
	{"M",
	"disable scratch memory to be allocated using virtual memory allocators",
                                          
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_EnableVirtualScratchMemory), 
		0,
		false
	}},
   {"disableVMCSProfiling",
	{"O",
	"disable VM data for virtual call sites",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVMCSProfiling), 
		0,
		false
	}},
   {"disableVSSStackCompaction",
	{"O",
	"disable VariableSizeSymbol stack compaction",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableVSSStackCompaction), 
		0,
		false
	}},
   {"disableWriteBarriersRangeCheck",
	{"O",
	"disable adding range check to write barriers",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableWriteBarriersRangeCheck), 
		0,
		false
	}},
   {"disableWrtBarSrcObjCheck",
	{"O",
	"disable to not check srcObj location for wrtBar in gc",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableWrtBarSrcObjCheck), 
		0,
		false
	}},
   {"disableZ10",
	{"O",
	"disable z10 support",                           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ10), 
		0,
		false
	}},
   {"disableZ13",
	{"O",
	"disable z13 support",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ13), 
		0,
		false
	}},
   {"disableZ13LoadAndMask",
	{"O",
	"disable load-and-mask instruction generation on z13",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ13LoadAndMask), 
		0,
		false
	}},
   {"disableZ13LoadImmediateOnCond",
	{"O",
	"disable load halfword immediate on condition instruction generation on z13",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ13LoadImmediateOnCond), 
		0,
		false
	}},
   {"disableZ14",
	{"O",
	"disable z14 support",                           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ14), 
		0,
		false
	}},
   {"disableZ196",
	{"O",
	"disable z196 support",                          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZ196), 
		0,
		false
	}},
   {"disableZArraySetUnroll",
	{"O",
	"disable arraySet unrolling on 390.",            
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZArraySetUnroll), 
		0,
		false
	}},
   {"disableZealousCodegenOpts",
	{"O",
	"disable use of zealous codegen optimizations.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZealousCodegenOpts), 
		0,
		false
	}},
   {"disableZEC12",
	{"O",
	"disable zEC12 support",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZEC12), 
		0,
		false
	}},
   {"disableZHelix",
	{"O",
	"[Deprecated] alias for disableZEC12",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZEC12), 
		0,
		false
	}},
   {"disableZImplicitNullChecks",
	{"O",
	"disable implicit null checks on 390",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZImplicitNullChecks), 
		0,
		false
	}},
   {"disableZNext",
	{"O",
	"disable zNext support",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZNext), 
		0,
		false
	}},
   {"disableZonedToDFPReduction",
	{"O",
	"disable strength reduction of zoned decimal arithmetic to DFP arithmetic",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DisableZonedToDFPReduction), 
		0,
		false
	}},
   {"dltMostOnce",
	{"O",
	"prevent DLT compilation of a method at more than one bytecode index.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DLTMostOnce), 
		0,
		false
	}},
   {"dontActivateCompThreadWhenHighPriReqIsBlocked",
	{"M",
	"do not activate another compilation thread when high priority request is blocked",  
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_ActivateCompThreadWhenHighPriReqIsBlocked), 
		0,
		false
	}},
   {"dontAddHWPDataToIProfiler",
	{"O",
	"Dont add HW Data to IProfiler",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontAddHWPDataToIProfiler), 
		0,
		false
	}},
   {"dontDowngradeToCold",
	{"M",
	"don't downgrade first time compilations from warm to cold",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontDowngradeToCold), 
		0,
		false
	}},
   {"dontDowngradeToColdDuringGracePeriod",
   {"M",
	"don't downgrade first time compilations from warm to cold during grace period (first second of run)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontDowgradeToColdDuringGracePeriod), 
		0,
		false
	}},
   {"dontDowngradeWhenRIIsTemporarilyOff",
   {"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontDowngradeWhenRIIsTemporarilyOff), 
		0,
		false
	}},
   {"dontIncreaseCountsForNonBootstrapMethods",
	{"M",
	"", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_IncreaseCountsForNonBootstrapMethods), 
		0,
		false
	}},
   {"dontJitIfSlotsSharedByRefAndNonRef",
	{"O",
	"fail the compilation (in FSD mode) if a slot needs to be shared between an address and a nonaddress.",    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontJitIfSlotsSharedByRefAndNonRef), 
		0,
		false
	}},
   {"dontRestrictInlinerDuringStartup",
	{"O",
	"do not restrict trivial inliner during startup", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_RestrictInlinerDuringStartup), 
		0,
		false
	}},
   {"dontRIUpgradeAOTWarmMethods",
	{"M",
	"don't RI upgrade AOT warm methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DontRIUpgradeAOTWarmMethods), 
		0,
		false
	}},
   {"dontSuspendCompThreadsEarly",
	{"M",
	"Do not suspend compilation threads when QWeight drops under a threshold", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_SuspendEarly), 
		0,
		false
	}},
   {"dontTurnOffSelectiveNoOptServerIfNoStartupHint",
	{"M",
	"", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_TurnOffSelectiveNoOptServerIfNoStartupHint), 
		0,
		false
	}},
   {"dontUseFastStackwalk",
	{"I",
	"Do not use accelerated stackwalking algorithm",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DoNotUseFastStackwalk), 
		0,
		false
	}},
   {"dontUseHigherCountsForNonSCCMethods",
	{"M",
	"Do not use the default high counts for methods belonging to classes not in SCC", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UseHigherCountsForNonSCCMethods), 
		0,
		false
	}},
   {"dontUseHigherMethodCountsAfterStartup",
	{"M",
	"Do not use the default high counts for methods after startup in AOT mode", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UseHigherMethodCountsAfterStartup), 
		0,
		false
	}},
   {"dontUseIdleTime",
	{"M",
	"Do not use cpu idle time to compile more aggressively", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UseIdleTime), 
		0,
		false
	}},
   {"dontUsePersistentIprofiler",
	{"M",
	"don't use iprofiler data stored int he shared cache, even if it is available",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DoNotUsePersistentIprofiler), 
		0,
		false
	}},
   {"dontUseRIOnlyForLargeQSZ",
	{"M",
	"Use RI regardless of the compilation queue size", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_UseRIOnlyForLargeQSZ), 
		0,
		false
	}},
   {"dontVaryInlinerAggressivenessWithTime",
	{"M",
	"Do not vary inliner aggressiveness with abstract time", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_VaryInlinerAggressivenessWithTime), 
		0,
		false
	}},
   {"dumpFinalMethodNamesAndCounts",
	{"O",
	"Printing of Method Names and Final Counts",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DumpFinalMethodNamesAndCounts), 
		0,
		false
	}},
   {"dumpInitialMethodNamesAndCounts",
	{"O",
	"Debug Printing of Method Names and Initial Counts.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DumpInitialMethodNamesAndCounts), 
		0,
		false
	}},
   {"dumpIprofilerMethodNamesAndCounts",
	{"O",
	"Debug Printing of Method Names and Persisted Counts.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DumpPersistedIProfilerMethodNamesAndCounts), 
		0,
		false
	}},
   {"dynamicThreadPriority",
	{"M",
	"enable dynamic changing of compilation thread priority",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_DynamicThreadPriority), 
		0,
		false
	}},
   {"earlyLPQ",
	{"M",
	"Allow compilations from low priority queue to happen early, during startup",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EarlyLPQ), 
		0,
		false
	}},
   {"enableAggressiveLiveness",
	{"I",
	"enable globalLiveVariablesForGC below warm",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAggressiveLiveness), 
		0,
		false
	}},
   {"enableAggressiveLoopVersioning",
	{"O",
	"Options and thresholds that result in loop versioning occurring in more cases",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAggressiveLoopVersioning), 
		0,
		false
	}},
   {"enableAllocationOfScratchBTL",
	{"M",
	"Allow the allocation scratch memory below the line (zOS 31-bit)", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DontAllocateScratchBTL), 
		0,
		false
	}},
   {"EnableAnnotations",                    
   {"O",
	"enable annotation support",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAnnotations), 
		0,
		false
	}},
   {"enableAOTCacheReclamation",
	{"O",
	"enable AOT reclamation of code and data cache on AOT relocation failures",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTCacheReclamation), 
		0,
		false
	}},
   {"enableAOTInlineSystemMethod",
	{"O",
	"enable AOT inline methods from system classes",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTInlineSystemMethod), 
		0,
		false
	}},
   {"enableAOTMethodEnter",
	{"O",
	"enable AOT method enter",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTMethodEnter), 
		0,
		false
	}},
   {"enableAOTMethodExit",
	{"O",
	"enable AOT method exit",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTMethodExit), 
		0,
		false
	}},
   {"enableAOTRelocationTiming",
	{"M",
	"enable timing stats for relocating AOT methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTRelocationTiming), 
		0,
		false
	}},
   {"enableAOTStats",
	{"O",
	"enable AOT statistics",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAOTStats), 
		0,
		false
	}},
   {"enableApplicationThreadYield",
	{"O",
	"insert yield points in application threads",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableAppThreadYield), 
		0,
		false
	}},
   {"enableBranchPreload",
	{"O",
	"enable return branch preload for each method (for func testing)", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableBranchPreload), 
		0,
		false
	}},
   {"enableCFGEdgeCounters",
	{"O",
	"enable CFG edge counters to keep track of taken and non taken branches in compiled code",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCFGEdgeCounters), 
		0,
		false
	}},
   {"enableCheapWarmOpts",
	{"O",
	"enable cheap warm optimizations", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableCheapWarmOpts), 
		0,
		false
	}},
   {"enableCodeCacheConsolidation",
	{"M",
	"enable code cache consolidation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCodeCacheConsolidation), 
		0,
		false
	}},
   {"enableColdCheapTacticalGRA",
	{"O",
	"enable cold cheap tactical GRA",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableColdCheapTacticalGRA), 
		0,
		false
	}},
   {"enableCompilationSpreading",
	{"C",
	"enable adding spreading invocations to methods before compiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCompilationSpreading), 
		0,
		false
	}},
   {"enableCompilationThreadThrottlingDuringStartup",
	{"M",
	"enable compilation thread throttling during startup",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCompThreadThrottlingDuringStartup), 
		0,
		false
	}},
   {"enableCompilationYieldStats",
	{"M",
	"enable statistics on time between 2 consecutive yield points",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCompYieldStats), 
		0,
		false
	}},
   {"enableCopyingTROTInduction1Idioms",
	{"O",
	"enable CopyingTROTInduction1 idiom patterns",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableCopyingTROTInduction1Idioms), 
		0,
		false
	}},
   {"enableDataCacheStatistics",
	{"I",
	"enable the collection and display of data cache related statistics.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableDataCacheStatistics),
		0,
		false
	}},
   {"enableDeterministicOrientedCompilation",
	{"O",
	"enable deteministic oriented compilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableDeterministicOrientedCompilation), 
		0,
		false
	}},
   {"enableDowngradeOnHugeQSZ",
	{"M",
	"downgrade first time compilations when the compilation queue is huge (1000+ entries)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableDowngradeOnHugeQSZ), 
		0,
		false
	}},
   {"enableDualTLH",
	{"D",
	"Enable use of non-zero initialized TLH. TR_EnableBatchClear must be set too.", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableDualTLH), 
		0,
		false
	}},
   {"enableDupRetTree",
	{"O",
	"Enable duplicate return tree",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableDupRetTree), 
		0,
		false
	}},
   {"enableDynamicRIBufferProcessing",
	{"O",
	"enable disabling buffer processing", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableDynamicRIBufferProcessing), 
		0,
		false
	}},
   {"enableDynamicSamplingWindow",
	{"M",
	"", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableDynamicSamplingWindow), 
		0,
		false
	}},
   {"enableEarlyCompilationDuringIdleCpu",
   {"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableEarlyCompilationDuringIdleCpu), 
		0,
		false
	}},
   {"enableEBBCCInfo",
	{"C",
	"enable tracking CCInfo in Extended Basic Block scope", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableEBBCCInfo), 
		0,
		false
	}},
   {"enableElementPrivatization",
	{"O",
	"enable privatization of stack declared elements accessed by const indices\n",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableElementPrivatization), 
		0,
		false
	}},
   {"enableExecutableELFGeneration",
	{"I",
	"enable the generation of executable ELF files",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EmitExecutableELFFile), 
		0,
		false
	}},
   {"enableExpensiveOptsAtWarm",
	{"O",
	"enable store sinking and OSR at warm and below",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableExpensiveOptsAtWarm), 
		0,
		false
	}},
   {"enableFastHotRecompilation",
	{"R",
	"try to recompile at hot sooner",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableFastHotRecompilation), 
		0,
		false
	}},
   {"enableFastScorchingRecompilation",
	{"R",
	"try to recompile at scorching sooner",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableFastScorchingRecompilation), 
		0,
		false
	}},
   {"enableFpreductionAnnotation",
	{"O",
	"enable fpreduction annotation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableFpreductionAnnotation), 
		0,
		false
	}},
   {"enableFSDGRA",
	{"O",
	"enable basic GRA in FSD mode",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FSDGRA), 
		0,
		false
	}},
   {"enableGCRPatching",
	{"R",
	"enable patching of the GCR guard",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableGCRPatching), 
		0,
		false
	}},
   {"enableGRACostBenefitModel",
	{"O",
	"enable GRA cost/benefit model",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableGRACostBenefitModel), 
		0,
		false
	}},
   {"enableGuardedCountingRecompilation",
	{"O",
	"enable GCR.  If you don't know what that is, I don't have room to explain it here.", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableGuardedCountingRecompilations), 
		0,
		false
	}},
   {"enableHalfSlotSpills",
	{"O",
	"enable sharing of a single 8-byte spill temp for two 4-byte values",  
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableHalfSlotSpills), 
		0,
		false
	}},
   {"enableHardwareProfileIndirectDispatch",
   {"O",
	"enable hardware profile indirect dispatch profiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableHardwareProfileIndirectDispatch), 
		0,
		false
	}},
   {"enableHardwareProfilerDuringStartup",
	{"O",
	"enable hardware profiler during startup", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableHardwareProfilerDuringStartup), 
		0,
		false
	}},
   {"enableHardwareProfileRecompilation",
	{"O",
	"enable hardware profile recompilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableHardwareProfileRecompilation), 
		0,
		false
	}},
   {"enableHCR",
	{"O",
	"enable hot code replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableHCR), 
		0,
		false
	}},
   {"enableInlineProfilingStats",
	{"O",
	"enable stats about profile based inlining",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_VerboseInlineProfiling), 
		0,
		false
	}},
   {"enableInliningDuringVPAtWarm",
	{"O",
	"enable inlining during VP for warm bodies",    
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableInliningDuringVPAtWarm), 
		0,
		false
	}},
   {"enableInliningOfUnsafeForArraylets",
	{"O",
	"enable inlining of Unsafe calls when arraylets are enabled",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableInliningOfUnsafeForArraylets), 
		0,
		false
	}},
   {"enableInterfaceCallCachingSingleDynamicSlot",
	{"O",
	"enable interfaceCall caching with one slot storing J9MethodPtr   ",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_enableInterfaceCallCachingSingleDynamicSlot), 
		0,
		false
	}},
   {"enableIprofilerChanges",
	{"O",
	"enable iprofiler changes",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableIprofilerChanges), 
		0,
		false
	}},
   {"enableJCLInline",
	{"O",
	"enable JCL Integer and Long methods inlining",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJCLInline), 
		0,
		false
	}},
   {"enableJITHelpershashCodeImpl",
	{"O",
	"enable java version of object hashCode()",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJITHelpershashCodeImpl), 
		0,
		false
	}},
   {"enableJITHelpersoptimizedClone",
	{"O",
	"enable java version of object clone()",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJITHelpersoptimizedClone), 
		0,
		false
	}},
   {"enableJProfiling",
	{"O",
	"enable JProfiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJProfiling), 
		0,
		false
	}},
   {"enableJProfilingInProfilingCompilations",
   {"O",
	"use jprofiling instrumentation in profiling compilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJProfilingInProfilingCompilations), 
		0,
		false
	}},
   {"enableJVMPILineNumbers",
	{"M",
	"enable output of line numbers via JVMPI",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJVMPILineNumbers), 
		0,
		false
	}},
   {"enableLabelTargetNOPs",
	{"O",
	"enable inserting NOPs before label targets",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLabelTargetNOPs),  
		0,
		false
	}},
   {"enableLargeCodePages",
	{"C",
	"enable large code pages", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLargeCodePages), 
		0,
		false
	}},
   {"enableLastRetrialLogging",
	{"O",
	"enable fullTrace logging for last compilation attempt. Needs to have a log defined on the command line",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLastCompilationRetrialLogging), 
		0,
		false
	}},
   {"enableLinkagePreserveStrategy2",
	{"O",
	"enable linkage strategy 2",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_LinkagePreserveStrategy2), 
		0,
		false
	}},
   {"enableLocalVPSkipLowFreqBlock",
	{"O",
	"Skip processing of low frequency blocks in localVP",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLocalVPSkipLowFreqBlock), 
		0,
		false
	}},
   {"enableLongRegAllocation",
	{"O",
	"enable allocation of 64-bit regs on 32-bit",     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Enable64BitRegsOn32Bit), 
		0,
		false
	}},
   {"enableLongRegAllocationHeuristic",
	{"O",
	"enable heuristic for long register allocation",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Enable64BitRegsOn32BitHeuristic), 
		0,
		false
	}},
   {"enableLoopEntryAlignment",
	{"O",
	"enable loop Entry alignment",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLoopEntryAlignment), 
		0,
		false
	}},
   {"enableLoopVersionerCountAllocFences",
	{"O",
	"allow loop versioner to count allocation fence nodes on PPC toward a profiled guard's block total",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLoopVersionerCountAllocationFences), 
		0,
		false
	}},
   {"enableLowerCompilationLimitsDecisionMaking",
	{"O",
	"enable the piece of code that lowers compilation limits when low on virtual memory (on Linux and z/OS)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableLowerCompilationLimitsDecisionMaking), 
		0,
		false
	}},
   {"enableMetadataBytecodePCToIAMap",
	{"O",
	"enable bytecode pc to IA map in the metadata",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableMetadataBytecodePCToIAMap), 
		0,
		false
	}},
   {"enableMetadataReclamation",
	{"I",
	"enable J9JITExceptionTable reclamation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableMetadataReclamation), 
		0,
		false
	}},
   {"enableMethodTrampolineReservation",
	{"O",
	"Reserve method trampolines even if they are not needed; only applicable on x86 and zLinux",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableMethodTrampolineReservation), 
		0,
		false
	}},
   {"enableMHCustomizationLogicCalls",
	{"C",
	"insert calls to MethodHandle.doCustomizationLogic for handle invocations outside of thunks",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableMHCustomizationLogicCalls), 
		0,
		false
	}},
   {"enableMonitorCacheLookup",
	{"O",
	"enable  monitor cache lookup under lock nursery ",                      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableMonitorCacheLookup), 
		0,
		false
	}},
   {"enableMultipleGCRPeriods",
	{"M",
	"allow JIT to get in and out of GCR",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableMultipleGCRPeriods), 
		0,
		false
	}},
   {"enableMutableCallSiteGuards",
	{"O",
	"enable virgual guards for calls to java.lang.invoke.MutableCallSite.getTarget().invokeExact(...) (including invokedynamic)",   
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableMutableCallSiteGuards), 
		0,
		false
	}},
   {"enableNewAllocationProfiling",
	{"O",
	"enable profiling of new allocations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableNewAllocationProfiling), 
		0,
		false
	}},
   {"enableNewCheckCastInstanceOf",
	{"O",
	"enable new Checkcast/InstanceOf evaluator",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableNewCheckCastInstanceOf), 
		0,
		false
	}},
   {"enableNewX86PrefetchTLH",
	{"O",
	"enable new X86 TLH prefetch algorithm",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableNewX86PrefetchTLH), 
		0,
		false
	}},
   {"enableNodeGC",
	{"M",
	"enable node recycling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableNodeGC), 
		0,
		false
	}},
   {"enableOnsiteCacheForSuperClassTest",
	{"O",
	"enable onsite cache for super class test",      
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableOnsiteCacheForSuperClassTest), 
		0,
		false
	}},
   {"enableOSR",
	{"O",
	"enable on-stack replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableOSR), 
		0,
		false
	}},
   {"enableOSROnGuardFailure",
	{"O",
	"perform a decompile using on-stack replacement every time a virtual guard fails",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableOSROnGuardFailure), 
		0,
		false
	}},
   {"enableOSRSharedSlots",
	{"O",
	"enable support for shared slots in OSR", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableOSRSharedSlots), 
		0,
		false
	}},
   {"enableOutlinedNew",
	{"O",
	"do object allocation logic with a fast jit helper", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableOutlinedNew), 
		0,
		false
	}},
   {"enableParanoidRefCountChecks",
	{"O",
	"enable extra reference count verification",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableParanoidRefCountChecks), 
		0,
		false
	}},
   {"enablePerfAsserts",
	{"O",
	"enable asserts for serious performance problems found during compilation",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnablePerfAsserts), 
		0,
		false
	}},
   {"enableProfiledDevirtualization",
	{"O",
	"enable devirtualization based on interpreter profiling",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_enableProfiledDevirtualization), 
		0,
		false
	}},
   {"enableRampupImprovements",
	{"M",
	"Enable various changes that improve rampup",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRampupImprovements), 
		0,
		false
	}},
   {"enableRangeSplittingGRA",
	{"O",
	"enable GRA splitting of live ranges to reduce register pressure   ", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRangeSplittingGRA), 
		0,
		false
	}},
   {"enableRATPurging",
	{"O",
	"purge the RAT table of assumptions after X registered assumptions",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRATPurging), 
		0,
		false
	}},
   {"enableReassociation",
	{"O",
	"apply reassociation rules in Simplifier",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableReassociation), 
		0,
		false
	}},
   {"enableRecompilationPushing",
	{"O",
	"enable pushing methods to be recompiled",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRecompilationPushing), 
		0,
		false
	}},
   {"enableRefinedAliases",
	{"O",
	"enable collecting side-effect summaries from compilations to improve aliasing info in subsequent compilations", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableRefinedAliases), 
		0,
		false
	}},
   {"enableRegisterPressureEstimation",
	{"O",
	"deprecated; same as enableRegisterPressureSimulation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableRegisterPressureSimulation), 
		0,
		false
	}},
   {"enableRegisterPressureSimulation",
	{"O",
	"walk the trees to estimate register pressure during global register allocation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableRegisterPressureSimulation), 
		0,
		false
	}},
   {"enableRelocatableELFGeneration",
	{"I",
	"enable the generation of object files use for static linking",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EmitRelocatableELFFile), 
		0,
		false
	}},
   {"enableRIEMIT",
	{"O",
	"Allows the z Codegen to emit RIEMIT instructions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRIEMIT), 
		0,
		false
	}},
   {"enableRMODE64",
	{"O",
	"Enable residence mode of compiled bodies on z/OS to reside above the 2-gigabyte bar",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRMODE64), 
		0,
		false
	}},
   {"enableRubyCodeCacheReclamation",
	{"O",
	"Enable Tiered Compilation on Ruby",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRubyCodeCacheReclamation), 
		0,
		false
	}},
   {"enableRubyTieredCompilation",
	{"O",
	"Enable Tiered Compilation on Ruby",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableRubyTieredCompilation), 
		0,
		false
	}},
   {"enableScorchInterpBlkFreqProfiling",
	{"R",
	"enable profiling blocks in the jit",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableScorchInterpBlockFrequencyProfiling), 
		0,
		false
	}},
   {"enableScratchMemoryDebugging",
	{"I",
	"Use the debug segment provider for allocating region memory segments.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableScratchMemoryDebugging),
		0,
		false
	}},
   {"enableSelectiveEnterExitHooks",
	{"O",
	"add method-specific test to JVMTI method enter and exit hooks",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSelectiveEnterExitHooks), 
		0,
		false
	}},
   {"enableSelfTuningScratchMemoryUsageBeforeCompile",
	{"O",
	"Enable self tuning scratch memory usage",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSelfTuningScratchMemoryUsageBeforeCompile), 
		0,
		false
	}},
   {"enableSelfTuningScratchMemoryUsageInTrMemory",
	{"O",
	"Enable self tuning scratch memory usage",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSelfTuningScratchMemoryUsageInTrMemory), 
		0,
		false
	}},
   {"enableSeparateInitFromAlloc",
	{"O",
	"enable separating init from alloc",            
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableSeparateInitFromAlloc), 
		0,
		false
	}},
   {"enableSequentialLoadStoreCold",
	{"O",
	"enable sequential store/load opt at cold level",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSequentialLoadStoreCold), 
		0,
		false
	}},
   {"enableSequentialLoadStoreWarm",
	{"O",
	"enable sequential store/load opt at warm level",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSequentialLoadStoreWarm), 
		0,
		false
	}},
   {"enableSharedCacheTiming",
	{"M",
	"enable timing stats for accessing the shared cache",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSharedCacheTiming), 
		0,
		false
	}},
   {"enableSIMDLibrary",
	{"M",
	"Enable recognized methods for SIMD library",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSIMDLibrary), 
		0,
		false
	}},
   {"enableSnapshotBlockOpts",
	{"O",
	"enable block ordering/redirecting optimizations in the presences of snapshot nodes",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSnapshotBlockOpts), 
		0,
		false
	}},
   {"enableSymbolValidationManager",
	{"M",
	"Enable Symbol Validation Manager for Relocatable Compile Validations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableSymbolValidationManager), 
		0,
		false
	}},
   {"enableTailCallOpt",
	{"R",
	"enable tall call optimization in peephole",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableTailCallOpt), 
		0,
		false
	}},
   {"enableThisLiveRangeExtension",
	{"R",
	"enable this live range extesion to the end of the method",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableThisLiveRangeExtension), 
		0,
		false
	}},
   {"enableTraps",
	{"C",
	"enable trap instructions",                     
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableTraps), 
		0,
		false
	}},
   {"enableTreePatternMatching",
	{"O",
	"Enable opts that use the TR_Pattern framework", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableTreePatternMatching), 
		0,
		false
	}},
   {"enableTrivialStoreSinking",
	{"O",
	"enable trivial store sinking",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableTrivialStoreSinking), 
		0,
		false
	}},
   {"enableUpgradesByJitSamplingWhenHWProfilingEnabled",
	{"O",
	"Allow Jit Sampling to upgrade cold compilations when HW Profiling is on",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableJitSamplingUpgradesDuringHWProfiling), 
		0,
		false
	}},
   {"enableUpgradingAllColdCompilations",
	{"O",
	"try to upgrade to warm all cold compilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableUpgradingAllColdCompilations), 
		0,
		false
	}},
   {"enableValueTracing",
	{"O",
	"enable runtime value tracing (experimental)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableValueTracing), 
		0,
		false
	}},
   {"enableVirtualPersistentMemory",
	{"M",
	"enable persistent memory to be allocated using virtual memory allocators",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableVirtualPersistentMemory), 
		0,
		false
	}},
   {"enableVpicForResolvedVirtualCalls",
	{"O",
	"enable PIC for resolved virtual calls",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableVPICForResolvedVirtualCalls), 
		0,
		false
	}},
   {"enableYieldVMAccess",
	{"O",
	"enable yielding of VM access when GC is waiting",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableYieldVMAccess), 
		0,
		false
	}},
   {"enableZEpilogue",
	{"O",
	"enable 64-bit 390 load-multiple breakdown.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Enable39064Epilogue), 
		0,
		false
	}},
   {"estimateRegisterPressure",
	{"O",
	"deprecated; equivalent to enableRegisterPressureSimulation", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_DisableRegisterPressureSimulation), 
		0,
		false
	}},
   {"experimentalClassLoadPhase",
	{"O",
	"enable the experimental class load phase algorithm",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ExperimentalClassLoadPhase), 
		0,
		false
	}},
   {"extractExitsByInvalidatingStructure",
	{"O",
	"Instead of running exit extraction normally, detect nodes that would be extracted, and invalidate structure if there are any",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ExtractExitsByInvalidatingStructure), 
		0,
		false
	}},
   {"failPreXRecompile",
	{"I",
	"fail prexistance based recompilatoins",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FailPreXRecompile), 
		0,
		false
	}},
   {"failRecompile",
	{"I",
	"fail the compile whenever recompiling a method",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FailRecompile), 
		0,
		false
	}},//
   {"firstLevelProfiling",
	{"O",
	"Profile first time compilations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FirstLevelProfiling), 
		0,
		false
	}},
   {"firstRun",
	{"O",
	"Tell the compiler this is the first run (for count setting and persistence).",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FirstRun), 
		0,
		false
	}},
   {"floatMAF",
	{"O",
	"Enable fused multiply add (FMA) operations.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FloatMAF), 
		0,
		false
	}},
   {"forceAOT",
	{"M",
	"Force compilations to be done in AOT mode",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceAOT), 
		0,
		false
	}},
   {"forceBCDInit",
	{"O",
	"Force Binary Coded Decimal (BCD) loads to be initialized by forcing the field to a temporary",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceBCDInit), 
		0,
		false
	}},
   {"forceFieldWatch",
	{"M",
	"Force JIT to pretend that field watch is activated",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableFieldWatch), 
		0,
		false
	}},
   {"forceIEEEDivideByZeroException",
	{"O",
	"Force IEEE divide by zero exception bit on when performing DFP division",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceIEEEDivideByZeroException), 
		0,
		false
	}},
   {"forceLargeRAMoves",
	{"O",
	"Always use 64 bit register moves in RA",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceLargeRAMoves), 
		0,
		false
	}},
   {"forceLoadAOT",
	{"M",
	"Force loading of relocatable code outside of class load phase from the shared cache",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceLoadAOT), 
		0,
		false
	}},
   {"forceNonSMP",
	{"D",
	"force UniP code generation.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceNonSMP), 
		0,
		false
	}},
   {"forceUsePreexistence",
	{"D",
	"Pretend methods are using pre-existence. RAS feature.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceUsePreexistence), 
		0,
		false
	}},
   {"forceVSSStackCompaction",
	{"O",
	"Always compact VariableSizeSymbols on the stack",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ForceVSSStackCompaction), 
		0,
		false
	}},
   {"fullInliningUnderOSRDebug",
	{"O",
	"Do full inlining under OSR based debug (new FSD)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_FullInlineUnderOSRDebug), 
		0,
		false
	}} , //
   {"generateCompleteInlineRanges",
	{"O",
	"generate meta data ranges for each change in inliner depth",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_GenerateCompleteInlineRanges), 
		0,
		false
	}},
   {"hcrPatchClassPointers",
	{
        "I",
	    "create runtime assumptions for patching pointers to classes, even though they are now updated in-place",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_HCRPatchClassPointers), 
		0,
		false
	}
},{
    "ignoreAssert",
    {   "O",
        "Ignore any failing assertions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_IgnoreAssert), 
		0,
		false
	}
},{
    "ignoreIEEE",
	{
        "O",
	    "allow non-IEEE compliant optimizations", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_IgnoreIEEERestrictions), 
		0,
		false
	}
},
   {"immediateCountingRecompilation",
	{"D",
	"Recompile GCR methods as soon as possible", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ImmediateCountingRecompilation), 
		0,
		false
	}},
   {"inhibitRecompilation",
	{"R",
	"Inhibit (but don't disable) recompilation. For diagnostic only.", 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_InhibitRecompilation), 
		0,
		false
	}},
   {"inhibitRIBufferProcessingDuringDeepSteady",
	{"R",
	"Inhibit RI during DeepSteady state",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_InhibitRIBufferProcessingDuringDeepSteady), 
		0,
		false
	}},
   {"inlineNativeOnly",
	{"O",
	"inliner only inline native methods and do not inline other Java methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_InlineNativeOnly), 
		0,
		false
	}},
   {"inlinerFanInUseCalculatedSize",
	{"O",
	"Use calculated size for fanin method size threshold",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_InlinerFanInUseCalculatedSize), 
		0,
		false
	}},
   {"inlineVeryLargeCompiledMethods",
	{"O",
	"Allow inlining of very large compiled methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_InlineVeryLargeCompiledMethods), 
		0,
		false
	}},
   {"iprofilerPerformTimestampCheck",
	{"O",
	"Interpreter Profiling will perform some validity checks based on timestamps",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_IProfilerPerformTimestampCheck), 
		0,
		false
	}},
   {"iprofilerVerbose",
	{"O",
	"Enable Interpreter Profiling output messages",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_VerboseInterpreterProfiling), 
		0,
		false
	}},
   {"jitAllAtMain",
	{"D",
	"jit all loaded methods when main is called",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_jitAllAtMain), 
		0,
		false
	}},
   {"keepBCDWidening",
	{"O",
	"stress testing option -- do not remove widening BCD operations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_KeepBCDWidening), 
		0,
		false
	}},
   {"lowerCountsForAotCold",
	{"M",
	"Lower counts for cold aot runs",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_LowerCountsForAotCold), 
		0,
		false
	}},
   {"maskAddresses",
	{"D",
	"remove addresses from trace file",                  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_MaskAddresses), 
		0,
		false
	}},
   {"mccSanityCheck",
	{"M",
	"Enable multi-code-cache sanity checking. High overhead",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CodeCacheSanityCheck), 
		0,
		false
	}},
   {"memUsage",
	{"D",
	"gather lexical memory profiling statistics of all memory types: stack, heap and persistent",
       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_LexicalMemProfiler), 
		0,
		false
	}},
   {"mimicInterpreterFrameShape",
	{"O",
	"Make sure all locals are laid out in the stack frame just as they would be for the interpreter",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_MimicInterpreterFrameShape), 
		0,
		false
	}},
   {"noAotSecondRunDetection",
	{"M",
	"do not do second run detection for AOT",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoAotSecondRunDetection), 
		0,
		false
	}},
   {"noIProfilerDuringStartupPhase",
	{"R",
	"turn off iprofiler during first startup phase",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoIProfilerDuringStartupPhase), 
		0,
		false
	}},
   {"noJitDuringBootstrap",
	{"D",
	"don't jit methods during bootstrap",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_noJitDuringBootstrap), 
		0,
		false
	}},
   {"noJitUntilMain",
	{"D",
	"don't jit methods until main has been called",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_noJitUntilMain), 
		0,
		false
	}},
   {"noload",
	{"M",
	"do not load AOT code from the shared cache (-Xaot option)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoLoadAOT), 
		0,
		false
	}},
   {"noRecompile",
	{"D",
	"do not recompile even when counts allow it",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoRecompile), 
		0,
		false
	}},
   {"noregmap",
	{"C",
	"generate GC maps without register maps",  
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_RegisterMaps), 0, false
    }},
   {"noResumableTrapHandler",
	{"C",
	"do not generate traps for exception detections",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoResumableTrapHandler), 
		0,
		false
	}},
   {"noServer",
	{"D",
	"Disable compilation strategy for large scale applications (e.g. WebSphere)",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoOptServer), 
		0,
		false
	}},
   {"nostore",
	{"M",
	"do not store AOT code into shared cache (-Xaot option)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_NoStoreAOT), 
		0,
		false
	}},
   {"oldDataCacheImplementation",
	{"I",
	"revert to old data cache implementation.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_OldDataCacheImplementation),
		0,
		false
	}},
   {"oldJVMPI",
	{"D",
	"old way of determining which jit options to use with JVMPI",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_OldJVMPI), 
		0,
		false
	}},
   {"omitFramePointer",
	{"I",
	"do not dedicate a frame pointer register for X86 system linkage.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_OmitFramePointer),
		0,
		false
	}},
   {"optDetails",
	{"L",
	"log all optimizer transformations",
       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceOptDetails), 
		0,
		false
	}},
   {"orderCompiles",
	{"C",
	"compile methods in limitfile order",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_OrderCompiles), 
		0,
		false
	}},
   {"paintAllocatedFrameSlotsDead",
	{"C",
	"paint all slots allocated in method prologue with deadf00d",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PaintAllocatedFrameSlotsDead), 
		0,
		false
	}},
   {"paintAllocatedFrameSlotsFauxObject",
	{"C",
	"paint all slots allocated in method prologue with faux object pointer",   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PaintAllocatedFrameSlotsFauxObject), 
		0,
		false
	}},
   {"paintDataCacheOnFree",
	{"I",
	"paint data cache allocations that are being returned to the pool",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PaintDataCacheOnFree), 
		0,
		false
	}},
   {"paranoidOptCheck",
	{"O",
	"check the trees and cfgs after every optimization phase",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnableParanoidOptCheck), 
		0,
		false
	}},
   {"performLookaheadAtWarmCold",
	{"O",
	"allow lookahead to be performed at cold and warm",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PerformLookaheadAtWarmCold), 
		0,
		false
	}},
   {"perfTool",
	{"M",
	"enable PerfTool",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PerfTool), 
		0,
		false
	}},
   {"poisonDeadSlots",
	{"O",
	"paints all dead slots with deadf00d",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PoisonDeadSlots), 
		0,
		false
	}},
   {"prepareForOSREvenIfThatDoesNothing",
	{"O",
	"emit the call to prepareForOSR even if there is no slot sharing",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnablePrepareForOSREvenIfThatDoesNothing), 
		0,
		false
	}},
   {"printAbsoluteTimestampInVerboseLog",
	{"O",
	"Print Absolute Timestamp in vlog",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PrintAbsoluteTimestampInVerboseLog), 
		0,
		false
	}},
   {"printErrorInfoOnCompFailure",
	{"O",
	"Print compilation error info to stderr",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PrintErrorInfoOnCompFailure), 
		0,
		false
	}},
   {"privatizeOverlaps",
	{"O",
	"if BCD storageRefs are going to overlap then do the move through a temp",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_PrivatizeOverlaps), 
		0,
		false
	}},
   {"profile",
	{"O",
	"compile a profiling method body",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Profile), 
		0,
		false
	}},
   {"profileCompileTime",
	{"I",
	"generate a perf report for a specific compilation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CompileTimeProfiler), 
		0,
		false
	}},
   {"profileMemoryRegions",
	{"I",
	"enable the collection of scratch memory profiling data",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ProfileMemoryRegions), 
		0,
		false
	}},
   {"pseudoRandomVerbose",
   {"O",
	"write info at non determinism points to vlog ",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_VerbosePseudoRandom), 
		0,
		false
	}},
   {"quickProfile",
	{"O",
	"make online-profile-gathering quick (and less precise)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_QuickProfile), 
		0,
		false
	}},
   {"randomGen",
	{"D",
	"Deprecated; same as randomize",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Randomize),  
		0,
		false
	}},
   {"randomize",
	{"D",
	"Randomize certain decisions and thresholds to improve test coverage",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Randomize),  
		0,
		false
	}},
   {"randomSeedRaw",
	{"R",
	"Uses the supplied random seed as-is; see also randomSeedSignatureHash", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_RandomSeedSignatureHash),  
		0,
		false
	}},
   {"randomSeedSignatureHash",
   {"R",
	"Set random seed value based on a hash of the method's signature, in order to get varying seeds while maintaining reproducibility",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_RandomSeedSignatureHash),  
		0,
		false
	}},
   {"reduceCountsForMethodsCompiledDuringStartup",
	{"M",
	"Needs SCC compilation hints",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ReduceCountsForMethodsCompiledDuringStartup), 
		0,
		false
	}},
   {"regmap",
	{"C",
	"generate GC maps with register maps",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_RegisterMaps), 0, 
    }},
   {"reserveAllLocks",
	{"O",
	"enable reserving locks for all classes and methods (DEBUG Only)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ReserveAllLocks), 
		0,
		false
	}},
   {"reservingLocks",
	{"O",
	"enable reserving locks for hot methods on classes that can be reserved",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ReservingLocks), 
		0,
		false
	}},
   {"restrictInlinerDuringStartup",
	{"O",
	"restrict trivial inliner during startup",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_RestrictInlinerDuringStartup), 
		0,
		false
	}},
   {"restrictStaticFieldFolding",
	{"O",
	"restrict instance field folding",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_RestrictStaticFieldFolding), 
		0,
		false
	}},
   {"rtGCMapCheck",
	{"D",
	"Enable runtime GC Map checking at every async check.",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_RTGCMapCheck), 
		0,
		false
	}},
   {"scalarizeSSOps",
	{"O",
	"support o-type optimization via scalarization of storega to storage operations",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_ScalarizeSSOps), 
		0,
		false
	}},
   {"sinkAllBlockedStores",
	{"O",
	"in trivialStoreSinking sink all stores that are blocked by a killed sym by creating an anchor",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SinkAllBlockedStores), 
		0,
		false
	}},
   {"sinkAllStores",
	{"O",
	"in trivialStoreSinking sink all stores possible by agressively creating anchors for indirect loads and killed syms",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SinkAllStores), 
		0,
		false
	}},
   {"sinkOnlyCCStores",
	{"O",
	"in trivialStoreSinking only sink stores that are to the psw.cc symbol",
                                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SinkOnlyCCStores), 
		0,
		false
	}},
   {"softFailOnAssume",
	{"M",
	"fail the compilation quietly and use the interpreter if an assume fails",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SoftFailOnAssume), 
		0,
		false
	}},
   {"staticDebugCounters",
	{"D",
	"Enable static versions of all enabled dynamic debug counters (unless staticDebugCounters={regex} is specified)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_StaticDebugCountersRequested), 
		0,
		false
	}},
   {"stressTrampolines",
	{"O",
	"enables trampolines to always be used for method and helper calls",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_StressTrampolines), 
		0,
		false
	}},
   {"strictFPCompares",
	{"C",
	"assume strictFP semantics for floating point compares only",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_StrictFPCompares), 
		0,
		false
	}},
   {"subtractLoopyMethodCounts",
	{"C",
	"Subtract loopy method counts instead of dividing",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SubtractLoopyMethodCounts), 
		0,
		false
	}},
   {"subtractMethodCountsWhenIprofilerIsOff",
	{"C",
	"Subtract method counts instead of dividing when Iprofiler is off",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SubtractMethodCountsWhenIprofilerIsOff), 
		0,
		false
	}},
   {"suffixLogs",
	{"O",
	"add the date/time/pid suffix to the file name of the logs",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_EnablePIDExtension), 
		0,
		false
	}},
   {"supportSwitchToInterpeter",
	{"C",
	"Generate code to allow each method to switch to the interpreter",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SupportSwitchToInterpreter), 
		0,
		false
	}},
   {"suspendCompThreadsEarly",
	{"M",
	"Suspend compilation threads when QWeight drops under a threshold",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_SuspendEarly), 
		0,
		false
	}},
   {"terseRegisterPressureTrace",
   {"L",
	"include only summary info about register pressure tracing when traceGRA is enabled",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TerseRegisterPressureTrace), 
		0,
		false
	}},
   {"timing",
	{"M",
	"time individual phases and optimizations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_Timing), 
		0,
		false
	}},
   {"timingCumulative",
	{"M",
	"time cumulative phases (ILgen,Optimizer,codegen)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_CummTiming), 
		0,
		false
	}},
#if defined(TR_HOST_X86) || defined(TR_HOST_POWER)
   {"tlhPrefetch",
	{"D",
	"enable software prefetch on allocation ",  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TLHPrefetch),  
		0,
		false
	}},
#endif // defined(TR_HOST_X86) || defined(TR_HOST_POWER)
   {"traceAddAndRemoveEdge",
	{"L",
	"trace edge addition and removal",             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceAddAndRemoveEdge), 
		0,
		false
	}},
   {"traceAliases",
	{"L",
	"trace alias set generation",                  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceAliases), 
		0,
		false
	}},
   {"traceBBVA",
	{"L",
	"trace backward bit vector analysis",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceBBVA), 
		0,
		false
	}},
   {"traceBC",
	{"L",
	"dump bytecodes",                              
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceBC), 
		0,
		false
	}},
   {"traceBlockFrequencyGeneration",
	{"L",
	"trace block frequency generation",            
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceBFGeneration), 
		0,
		false
	}},
   {"traceBVA",
	{"L",
	"trace bit vector analysis",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceBVA), 
		0,
		false
	}},
   {"traceCG",
	{"L",
	"dump output of code generation passes",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceCG), 
		0,
		false
	}},
   {"traceCodeGen",
	{"L",
	"dump output of code generation passes",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceCG), 
		0,
		false
	}},
   {"traceDominators",
	{"L",
	"trace dominators and post-dominators",        
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceDominators), 
		0,
		false
	}},
   {"traceExitExtraction",
	{"L",
	"trace extraction of structure nodes that unconditionally exit to outer regions",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceExitExtraction), 
		0,
		false
	}},
   {"traceFull",
	{"L",
	"turn on all trace options",                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceAll), 
		0,
		false
	}},
   {"traceILGen",
	{"L",
	"trace IL generator",                          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceILGen), 
		0,
		false
	}},
   {"traceILValidator",
	{"L",
	"trace validation over intermediate language constructs",
        OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceILValidator), 
		0,
		false
	}},
   {"traceILWalk",
	{"L",
	"synonym for traceILWalks",                             
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceILWalks), 
		0,
		false
	}},
   {"traceILWalks",
	{"L",
	"trace iteration over intermediate language constructs",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceILWalks), 
		0,
		false
	}},
   {"traceKnownObjectGraph",
	{"L",
	"trace the relationships between objects in the known-object table",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceKnownObjectGraph), 
		0,
		false
	}},
   {"traceLabelTargetNOPs",
	{"L",
	"trace inserting of NOPs before label targets",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceLabelTargetNOPs), 
		0,
		false
	}},
   {"traceLastOpt",
	{"L",
	"extra tracing for the opt corresponding to lastOptIndex; usually used with traceFull",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceLastOpt), 
		0,
		false
	}},
   {"traceLiveMonitorMetadata",
	{"L",
	"trace live monitor metadata",                 
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceLiveMonitorMetadata), 
		0,
		false
	}},
   {"traceLiveness",
	{"L",
	"trace liveness analysis",                    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceLiveness), 
		0,
		false
	}},
   {"traceLookahead",
	{"O",
	"trace class lookahead",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceLookahead), 
		0,
		false
	}},
   {"traceMarkingOfHotFields",
	{"M",
	"trace marking of Hot Fields",                
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceMarkingOfHotFields), 
		0,
		false
	}},
   {"traceMethodIndex",
	{"L",
	"report every method symbol that gets created and consumes a methodIndex",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceMethodIndex), 
		0,
		false
	}},
   {"traceNodeFlags",
	{"L",
	"trace setting/resetting of node flags",       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceNodeFlags), 
		0,
		false
	}},
   {"traceNonLinearRA",
	{"L",
	"trace non-linear RA",                         
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceNonLinearRegisterAssigner), 
		0,
		false
	}},
   {"traceOpts",
	{"L",
	"dump each optimization name",                
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceOpts), 
		0,
		false
	}},
   {"traceOptTrees",
	{"L",
	"dump trees after each optimization",          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceOptTrees), 
		0,
		false
	}},
   {"traceOSR",
	{"L",
	"trace OSR",                                   
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceOSR), 
		0,
		false
	}},
   {"tracePartialInlining",
	{"L",
	"trace partial inlining heuristics",           
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TracePartialInlining), 
		0,
		false
	}},
   {"tracePREForSubNodeReplacement",
	{"L",
	"trace partial redundancy elimination focussed on optimal subnode replacement",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TracePREForOptimalSubNodeReplacement), 
		0,
		false
	}},
   {"traceReachability",
	{"L",
	"trace all analyses based on the reachability engine",    
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceReachability), 
		0,
		false
	}},
   {"traceRegisterPressureDetails",
	{"L",
	"include extra register pressure annotations in register pressure simulation and tree evaluation traces",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRegisterPressureDetails), 
		0,
		false
	}},
   {"traceRegisterState",
	{"L",
	"trace bit vector denoting assigned registers after register allocation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRegisterState), 
		0,
		false
	}},
   {"traceRelocatableDataCG",
	{"L",
	"trace relocation data when generating relocatable code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRelocatableDataCG), 
		0,
		false
	}},
   {"traceRelocatableDataDetailsCG",
	{"L",
	"trace relocation data details when generating relocatable code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRelocatableDataDetailsCG), 
		0,
		false
	}},
   {"traceRelocatableDataDetailsRT",
	{"L",
	"trace relocation data details when relocating relocatable code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRelocatableDataDetailsRT), 
		0,
		false
	}},
   {"traceRelocatableDataRT",
	{"L",
	"trace relocation data when relocating relocatable code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceRelocatableDataRT), 
		0,
		false
	}},
   {"traceReloCG",
	{"L",
	"trace relocation data details with generation info when generating relocatable code",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceReloCG),
		0,
		false
	}},
   {"traceScalarizeSSOps",
	{"L",
	"trace scalarization of array/SS ops",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceScalarizeSSOps), 
		0,
		false
	}},
   {"traceSEL",
	{"L",
	"trace sign extension load",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceSEL), 
		0,
		false
	}},
   {"traceStructuralAnalysis",
	{"L",
	"trace structural analysis",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceSA), 
		0,
		false
	}},
   {"traceTempUsage",
	{"L",
	"trace number of temps used",                  
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceTempUsage), 
		0,
		false
	}},
   {"traceTempUsageMore",
	{"L",
	"trace usage of temps, showing each temp used",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceTempUsageMore), 
		0,
		false
	}},
   {"traceTreePatternMatching",
	{"L",
	"trace the functioning of the TR_Pattern framework",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceTreePatternMatching), 
		0,
		false
	}},
   {"traceTrees",
	{"L",
	"dump trees after each compilation phase",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceTrees), 
		0,
		false
	}},
   {"traceTrivialDeadTreeRemoval",
	{"L",
	"trace trivial dead tree removal",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceTrivialDeadTreeRemoval), 
		0,
		false
	}},
   {"traceUnsafeInlining",
	{"L",
	"trace unsafe inlining",                       
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceUnsafeInlining), 
		0,
		false
	}},
   {"traceUseDefs",
	{"L",
	"trace use def info",                          
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceUseDefs), 
		0,
		false
	}},
   {"traceValueNumbers",
	{"L",
	"trace value number info",                     
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceValueNumbers), 
		0,
		false
	}},
   {"traceVFPSubstitution",
	{"L",
	"trace replacement of virtual frame pointer with actual register in memrefs",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceVFPSubstitution), 
		0,
		false
	}},
   {"traceVIP",
	{"L",
	"trace variable initializer propagation (constant propagation of read-only variables)",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceVIP), 
		0,
		false
	}},
   {"traceVPConstraints",
	{"L",
	"trace the execution of value propagation merging and intersecting",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TraceVPConstraints), 
		0,
		false
	}},
   {"turnOffSelectiveNoOptServerIfNoStartupHint",
	{"M",
	"",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_TurnOffSelectiveNoOptServerIfNoStartupHint), 
		0,
		false
	}},
   {"unleashStaticFieldFolding",
	{"O",
	"bypass the class white-list, and allow static final fields to be folded aggressively", 
		OptionProcessors::setFalse,
		OPTION_MEMBER_TO_SET(TR_RestrictStaticFieldFolding), 
		0,
		false
	}},
   {"unresolvedSymbolsAreNotColdAtCold",
	{"R",
	"Mark unresolved symbols as cold blocks at cold or lower",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UnresolvedAreNotColdAtCold), 
		0,
		false
	}},
   {"upgradeBootstrapAtWarm",
	{"R",
	"Recompile bootstrap AOT methods at warm instead of cold",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UpgradeBootstrapAtWarm), 
		0,
		false
	}},
   {"useGlueIfMethodTrampolinesAreNotNeeded",
	{"O",
	"Safety measure; return to the old behaviour of always going through the glue",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseGlueIfMethodTrampolinesAreNotNeeded), 
		0,
		false
	}},
   {"useHigherCountsForNonSCCMethods",
	{"M",
	"use the default high counts for methods belonging to classes not in SCC",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseHigherCountsForNonSCCMethods), 
		0,
		false
	}},
   {"useHigherMethodCounts",
	{"M",
	"use the default high counts for methods even for AOT",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseHigherMethodCounts), 
		0,
		false
	}},
   {"useHigherMethodCountsAfterStartup",
	{"M",
	"use the default high counts for methods after startup in AOT mode",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseHigherMethodCountsAfterStartup), 
		0,
		false
	}},
   {"useIdleTime",
	{"M",
	"use cpu idle time to compile more aggressively",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseIdleTime), 
		0,
		false
	}},
   {"useILValidator",
	{"O",
	"use the new ILValidator to check IL instead of the old TreeVerifier",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseILValidator), 
		0,
		false
	}},
   {"useLowerMethodCounts",
	{"M",
	"use the original initial counts for methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseLowerMethodCounts), 
		0,
		false
	}},
   {"useLowPriorityQueueDuringCLP",
	{"O",
	"place cold compilations due to classLoadPhase "
                                     "in the low priority queue to be compiled later",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseLowPriorityQueueDuringCLP), 
		0,
		false
	}},
   {"useOldHCRGuardAOTRelocations",
	{"I",
	"create apparently ineffective AOT relocations for HCR guards",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseOldHCRGuardAOTRelocations), 
		0,
		false
	}},
   {"useOldIProfilerDeactivationLogic",
	{"M",
	"Use Old Iprofiler Deactivation Logic",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseOldIProfilerDeactivationLogic), 
		0,
		false
	}},
   {"useOptLevelAdjustment",
	{"M",
	"Enable decreasing the opt level based on load",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseOptLevelAdjustment), 
		0,
		false
	}},
   {"useRIOnlyForLargeQSZ",
	{"M",
	"Use RI only when the compilation queue size grows too large",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseRIOnlyForLargeQSZ), 
		0,
		false
	}},
   {"useSamplingJProfilingForAllFirstTimeComps",
   {"M",
	"Heuristic",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseSamplingJProfilingForAllFirstTimeComps), 
		0,
		false
	}},
   {"useSamplingJProfilingForDLT",
	{"M",
	"Heuristic. Use samplingJProfiling for DLT methods",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseSamplingJProfilingForDLT), 
		0,
		false
	}},
   {"useSamplingJProfilingForInterpSampledMethods",
   {"M",
	"Heuristic. Use samplingJProfiling for methods sampled by interpreter",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseSamplingJProfilingForInterpSampledMethods), 
		0,
		false
	}},
   {"useSamplingJProfilingForLPQ",
	{"M",
	"Heuristic. Use samplingJProfiling for methods from low priority queue",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseSamplingJProfilingForLPQ), 
		0,
		false
	}},
   {"useStrictStartupHints",
	{"M",
	"Startup hints from application obeyed strictly",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseStrictStartupHints), 
		0,
		false
	}},
   {"useSymbolValidationManager",
	{"M",
	"Use Symbol Validation Manager for Relocatable Compile Validations",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseSymbolValidationManager), 
		0,
		false
	}},
   {"useVmTotalCpuTimeAsAbstractTime",
	{"M",
	"Use VmTotalCpuTime as abstractTime",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_UseVmTotalCpuTimeAsAbstractTime), 
		0,
		false
	}},
   {"varyInlinerAggressivenessWithTime",
	{"M",
	"Vary inliner aggressiveness with abstract time",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_VaryInlinerAggressivenessWithTime), 
		0,
		false
	}},
   {"verifyReferenceCounts",
	{"I",
	"verify the sanity of object reference counts before manipulation",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_VerifyReferenceCounts), 
		0,
		false
	}},
   {"waitOnCompilationQueue",
	{"M",
	"Perform synchronous wait until compilation queue empty. Primarily for use with Compiler.command",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_WaitBit), 
		0,
		false
	}},
   {"x86HLE",
	{"C",
	"Enable haswell hardware lock elision",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_X86HLE), 
		0,
		false
	}},
   {"x86UseMFENCE",
	{"M",
	"Enable to use mfence to handle volatile store",
		OptionProcessors::setTrue,
		OPTION_MEMBER_TO_SET(TR_X86UseMFENCE), 
		0,
		false
	}}

#endif